before_script:
  - docker info
  - MAJOR_VERSION=$(echo "${CI_COMMIT_TAG#v}" | cut -d'.' -f1)
  - MINOR_VERSION=$(echo "${CI_COMMIT_TAG#v}" | cut -d'.' -f2)
  - '[ "x$CI_COMMIT_TAG" != "x" ] && OOD_PACKAGING_RELEASE="${MAJOR_VERSION}.${MINOR_VERSION}" || OOD_PACKAGING_RELEASE=main'
  - bundle install --path vendor/bundle --without test
stages:
  - build
  - deploy

variables:
  GIT_STRATEGY: clone
  GIT_DEPTH: 0
  OOD_PACKAGING_DEBUG: 'true'
  OOD_PACKAGING_GPG_PRIVATE_KEY: /systems/osc_certs/gpg/ondemand/ondemand-sha512.sec
  OOD_PACKAGING_GPG_PASSPHRASE: /systems/osc_certs/gpg/ondemand/.gpgpass

build-nightly:
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - bundle exec rake package:build[$OOD_PACKAGING_DIST,$OOD_PACKAGING_ARCH,true]
  parallel:
    matrix:
      - OOD_PACKAGING_DIST: [el8]
        OOD_PACKAGING_ARCH: [x86_64, aarch64, ppc64le]
        OOD_PACKAGING_GPG_PRIVATE_KEY: /systems/osc_certs/gpg/ondemand/ondemand.sec
      - OOD_PACKAGING_DIST: [el9, debian-12, ubuntu-24.04]
        OOD_PACKAGING_ARCH: [x86_64, aarch64, ppc64le]
      # Ubuntu doesn't have way to get NodeJS 14+ on ppc64le
      - OOD_PACKAGING_DIST: [ubuntu-20.04, ubuntu-22.04]
        OOD_PACKAGING_ARCH: [x86_64, aarch64]
      # Amazon 2023 on aarch64 is slow and will time out
      - OOD_PACKAGING_DIST: [amzn2023]
        OOD_PACKAGING_ARCH: [x86_64]
  timeout: 3h
  artifacts:
    paths:
      - dist
    name: "$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA"

build:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
    # Re-enable once Gitlab instance using plugin to integrate with Github
    # - if: '$CI_PIPELINE_SOURCE == "external_pull_request_event"'
    - if: '$CI_COMMIT_BRANCH !~ /^(master|release_[0-9]\.[0-9])$/ && $CI_COMMIT_TAG == null'
  script:
    - bundle exec rake package:build[$OOD_PACKAGING_DIST,$OOD_PACKAGING_ARCH]
  parallel:
    matrix:
      - OOD_PACKAGING_DIST: [el8]
        OOD_PACKAGING_ARCH: [x86_64, aarch64, ppc64le]
        OOD_PACKAGING_GPG_PRIVATE_KEY: /systems/osc_certs/gpg/ondemand/ondemand.sec
      - OOD_PACKAGING_DIST: [el9, debian-12, ubuntu-24.04]
        OOD_PACKAGING_ARCH: [x86_64, aarch64, ppc64le]
      # Ubuntu doesn't have way to get NodeJS 14+ on ppc64le
      - OOD_PACKAGING_DIST: [ubuntu-20.04, ubuntu-22.04]
        OOD_PACKAGING_ARCH: [x86_64, aarch64]
      # Amazon 2023 on aarch64 is slow and will time out
      - OOD_PACKAGING_DIST: [amzn2023]
        OOD_PACKAGING_ARCH: [x86_64]
  timeout: 3h
  artifacts:
    paths:
      - dist
    name: "$CI_PROJECT_NAME-$CI_COMMIT_TAG"

deploy-nightly:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - mkdir tmp
    - echo "Clone ondemand-packaging branch ${OOD_PACKAGING_RELEASE}"
    - git clone --single-branch --branch $OOD_PACKAGING_RELEASE https://github.com/OSC/ondemand-packaging.git tmp/ondemand-packaging
    - ./tmp/ondemand-packaging/release.py --debug --pkey /systems/osc_certs/ssh/ondemand-packaging/id_rsa -c nightly ./dist/*

deploy-build:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - mkdir tmp
    - echo "Clone ondemand-packaging branch ${OOD_PACKAGING_RELEASE}"
    - git clone --single-branch --branch $OOD_PACKAGING_RELEASE https://github.com/OSC/ondemand-packaging.git tmp/ondemand-packaging
    - ./tmp/ondemand-packaging/release.py --debug --pkey /systems/osc_certs/ssh/ondemand-packaging/id_rsa -c build -r $CI_COMMIT_TAG ./dist/*

deploy:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - mkdir tmp
    - echo "Clone ondemand-packaging branch ${OOD_PACKAGING_RELEASE}"
    - git clone --single-branch --branch $OOD_PACKAGING_RELEASE https://github.com/OSC/ondemand-packaging.git tmp/ondemand-packaging
    - ./tmp/ondemand-packaging/release.py --debug --pkey /systems/osc_certs/ssh/ondemand-packaging/id_rsa -c main ./dist/*
