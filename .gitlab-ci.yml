before_script:
  - docker info
  - bundle install --path vendor/bundle --without test
stages:
  - build
  - deploy

variables:
  GIT_STRATEGY: clone
  OOD_PACKAGING_RELEASE: '2.0'
  OOD_PACKAGING_DEBUG: 'true'
  OOD_PACKAGING_GPG_PRIVATE_KEY: /systems/osc_certs/gpg/ondemand/ondemand.sec
  OOD_PACKAGING_GPG_PASSPHRASE: /systems/osc_certs/gpg/ondemand/.gpgpass

build:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - bundle exec rake package:build[$OOD_PACKAGING_DIST]
  parallel:
    matrix:
      - OOD_PACKAGING_DIST: [el7, el8, ubuntu-18.04, ubuntu-20.04]
  artifacts:
    paths:
      - dist
    name: "$CI_PROJECT_NAME-$CI_COMMIT_TAG"

rpm-deploy-build:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - mkdir tmp
    - echo "Clone ondemand-packaging branch ${OOD_PACKAGING_RELEASE}"
    - git clone --single-branch --branch $OOD_PACKAGING_RELEASE https://github.com/OSC/ondemand-packaging.git tmp/ondemand-packaging
    - ./tmp/ondemand-packaging/release.py --debug --pkey /systems/osc_certs/ssh/ondemand-packaging/id_rsa -c build -r $CI_COMMIT_TAG ./dist/*

rpm-deploy:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - mkdir tmp
    - echo "Clone ondemand-packaging branch ${OOD_PACKAGING_RELEASE}"
    - git clone --single-branch --branch $OOD_PACKAGING_RELEASE https://github.com/OSC/ondemand-packaging.git tmp/ondemand-packaging
    - ./tmp/ondemand-packaging/release.py --debug --pkey /systems/osc_certs/ssh/ondemand-packaging/id_rsa -c main ./dist/*
