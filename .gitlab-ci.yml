before_script:
  - docker info
  - MAJOR_VERSION=$(echo "${CI_COMMIT_TAG#v}" | cut -d'.' -f1)
  - MINOR_VERSION=$(echo "${CI_COMMIT_TAG#v}" | cut -d'.' -f2)
  - '[ "x$CI_COMMIT_TAG" != "x" ] && OOD_PACKAGING_RELEASE="${MAJOR_VERSION}.${MINOR_VERSION}" || OOD_PACKAGING_RELEASE=main'
  - bundle install --path vendor/bundle --without test
stages:
  - build
  - deploy

variables:
  GIT_STRATEGY: clone
  GIT_DEPTH: 0
  OOD_PACKAGING_DEBUG: 'true'
  OOD_PACKAGING_GPG_PRIVATE_KEY: /systems/osc_certs/gpg/ondemand/ondemand.sec
  OOD_PACKAGING_GPG_PASSPHRASE: /systems/osc_certs/gpg/ondemand/.gpgpass

rpm-build-nightly-el7:
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - bundle exec rake package:build[el7,true]
  artifacts:
    paths:
      - dist
    name: "$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA"

rpm-build-nightly-el8:
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - bundle exec rake package:build[el8,true]
  artifacts:
    paths:
      - dist
    name: "$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA"

deb-build-nightly-ubuntu-2004:
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - bundle exec rake package:build[ubuntu-20.04,true]
  artifacts:
    paths:
      - dist
    name: "$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA"

deb-build-nightly-ubuntu-2204:
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - bundle exec rake package:build[ubuntu-22.04,true]
  artifacts:
    paths:
      - dist
    name: "$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA"

rpm-build-el7:
  stage: build
  only:
    - tags
  script:
    - bundle exec rake package:build[el7]
  artifacts:
    paths:
      - dist
    name: "$CI_PROJECT_NAME-$CI_COMMIT_TAG"

rpm-build-el8:
  stage: build
  only:
    - tags
  script:
    - bundle exec rake package:build[el8]
  artifacts:
    paths:
      - dist
    name: "$CI_PROJECT_NAME-$CI_COMMIT_TAG"

deb-build-ubuntu-2004:
  stage: build
  only:
    - tags
  script:
    - bundle exec rake package:build[ubuntu-20.04]
  artifacts:
    paths:
      - dist
    name: "$CI_PROJECT_NAME-$CI_COMMIT_TAG"

deb-build-ubuntu-2204:
  stage: build
  only:
    - tags
  script:
    - bundle exec rake package:build[ubuntu-22.04]
  artifacts:
    paths:
      - dist
    name: "$CI_PROJECT_NAME-$CI_COMMIT_TAG"

deploy-nightly:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - mkdir tmp
    - echo "Clone ondemand-packaging branch ${OOD_PACKAGING_RELEASE}"
    - git clone --single-branch --branch $OOD_PACKAGING_RELEASE https://github.com/OSC/ondemand-packaging.git tmp/ondemand-packaging
    - ./tmp/ondemand-packaging/release.py --debug --pkey /systems/osc_certs/ssh/ondemand-packaging/id_rsa -c nightly ./dist/*

deploy-build:
  stage: deploy
  only:
    - tags
  script:
    - mkdir tmp
    - echo "Clone ondemand-packaging branch ${OOD_PACKAGING_RELEASE}"
    - git clone --single-branch --branch $OOD_PACKAGING_RELEASE https://github.com/OSC/ondemand-packaging.git tmp/ondemand-packaging
    - ./tmp/ondemand-packaging/release.py --debug --pkey /systems/osc_certs/ssh/ondemand-packaging/id_rsa -c build -r $CI_COMMIT_TAG ./dist/*

deploy:
  stage: deploy
  only:
    - tags
  script:
    - mkdir tmp
    - echo "Clone ondemand-packaging branch ${OOD_PACKAGING_RELEASE}"
    - git clone --single-branch --branch $OOD_PACKAGING_RELEASE https://github.com/OSC/ondemand-packaging.git tmp/ondemand-packaging
    - ./tmp/ondemand-packaging/release.py --debug --pkey /systems/osc_certs/ssh/ondemand-packaging/id_rsa -c main ./dist/*
