#
# Open OnDemand Portal
#
# Generated using ood-portal-generator version <%= OodPortalGenerator::VERSION %>
#
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!                                    !!
# !!     DO NOT EDIT THIS FILE          !!
# !!                                    !!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
# This file is auto-generated by ood-portal-generator and will be over-written
# in future updates.
#
# 1. To modify this file, first update the global configuration file:
#
#      /etc/ood/config/ood_portal.yml
#
#    You can find more information about the ood-portal-generator configuration
#    at:
#
#      https://osc.github.io/ood-documentation/master/infrastructure/ood-portal-generator.html
#
# 2. Then build/install the updated Apache config with:
#
#      sudo /opt/ood/ood-portal-generator/sbin/update_ood_portal
#
# 3. Finally, restart Apache to have the changes take effect:
#
#      # For CentOS 6
#      sudo service httpd24-httpd condrestart
#      sudo service httpd24-htcacheclean condrestart
#
#      # For CentOS 7
#      sudo systemctl try-restart httpd24-httpd.service httpd24-htcacheclean.service
#
#      # For CentOS 8
#      sudo systemctl try-restart httpd.service htcacheclean.service
#

<% if @listen_addr_port -%>
# Listen should always be one of:
#     - <port>
#     - <ipv4>:<port>
#     - <ipv6>:<port>
#
<% Array(@listen_addr_port).each do |addr_port| -%>
Listen <%= addr_port %>
<% end -%>
<% end -%>

<% if @ssl && @use_rewrites -%>
# Redirect all http traffic to the https Open OnDemand portal URI
#     http://*:<%= @port %>
#     #=> <%= @ssl ? "https" : "http" %>://<%= @proxy_server || "localhost" %>:<%= @port %>
#
<VirtualHost *:80>
  RewriteEngine On
  RewriteRule ^(.*) <%= @ssl ? "https" : "http" %>://<%= @proxy_server || "%{SERVER_NAME}" %>:<%= @port %>$1 [R=301,NE,L]
</VirtualHost>
<% end -%>

# The Open OnDemand portal VirtualHost
#
<VirtualHost *:<%= @port %>>
  <%- if @servername -%>
  ServerName <%= @servername %>
  <%- end -%>

  ErrorLog  "<%= @errorlog %>"
  <%- if @logformat -%>
  LogFormat <%= @logformat %>
  TransferLog "<%= @accesslog %>"
  <%- else -%>
  CustomLog "<%= @accesslog %>" combined
  <%- end -%>

  <%- if @servername && @use_rewrites -%>
  RewriteEngine On
  RewriteCond %{HTTP_HOST} !^(<%= @proxy_server %>(:<%= @port %>)?)?$ [NC]
  RewriteRule ^(.*) <%= @ssl ? "https" : "http" %>://<%= @proxy_server %>:<%= @port %>$1 [R=301,NE,L]
  <%- end -%>

  <%- if @use_rewrites && @use_maintenance -%>
  # Support maintenance page during outages of OnDemand
  RewriteEngine On
  RewriteCond <%= @public_root %>/maintenance/index.html -f
  RewriteCond /etc/ood/maintenance.enable -f
  RewriteCond %{REQUEST_URI} !/public/maintenance/.*$
  <%- @maintenance_ip_whitelist.each do |ip| -%>
  RewriteCond %{REMOTE_ADDR} !^<%= escape_ip(ip) %>
  <%- end -%>
  RewriteRule ^.*$ <%= @public_uri %>/maintenance/index.html [R=503,L]
  ErrorDocument 503 <%= @public_uri %>/maintenance/index.html
  Header Set Cache-Control "max-age=0, no-store"

  <%- end -%>
  <%- if @security_csp_frame_ancestors -%>
  Header always set Content-Security-Policy "frame-ancestors <%= @security_csp_frame_ancestors -%>;"
  <%- end -%>
  <%- if @security_strict_transport -%>
  Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
  <%- end -%>
  <%- if @ssl -%>

  SSLEngine On
  <%- @ssl.each do |line| -%>
  <%= line %>
  <%- end -%>
  <%- end -%>

  <%- if @oidc_uri && @oidc_provider_metadata_url && @oidc_client_id -%>
  # OIDC configuration
  #
  OIDCProviderMetadataURL <%= @oidc_provider_metadata_url %>
  OIDCClientID <%= @oidc_client_id %>
  <%- if @oidc_client_secret -%>
  OIDCClientSecret <%= @oidc_client_secret %>
  <%- end -%>
  OIDCRedirectURI <%= @oidc_redirect_uri %>
  OIDCRemoteUserClaim <%= @oidc_remote_user_claim %>
  OIDCScope "<%= @oidc_scope %>"
  OIDCCryptoPassphrase <%= @oidc_crypto_passphrase %>
  OIDCSessionInactivityTimeout <%= @oidc_session_inactivity_timeout %>
  OIDCSessionMaxDuration <%= @oidc_session_max_duration %>
  OIDCStateMaxNumberOfCookies <%= @oidc_state_max_number_of_cookies %>
  OIDCCookieSameSite <%= @oidc_cookie_same_site %>
  <%- @oidc_settings.keys.sort.each do |oidc_setting| -%>
  <%= oidc_setting %> <%= @oidc_settings[oidc_setting] %>
  <%- end -%>

  <%- end -%>
  # Lua configuration
  #
  <%- if @lua_root -%>
  LuaRoot "<%= @lua_root %>"
  <%- end -%>
  LogLevel lua_module:<%= @lua_log_level %>

  # Log authenticated user requests (requires min log level: info)
  LuaHookLog logger.lua logger

  # Authenticated-user to system-user mapping configuration
  #
  <%- if @user_map_cmd -%>
  SetEnv OOD_USER_MAP_CMD "<%= @user_map_cmd %>"
  <%- elsif @user_map_match -%>
  SetEnv OOD_USER_MAP_MATCH "<%= @user_map_match %>"
  <%- end -%>
  <%- if @user_env -%>
  SetEnv OOD_USER_ENV "<%= @user_env %>"
  <%- end -%>
  <%- if @map_fail_uri -%>
  SetEnv OOD_MAP_FAIL_URI "<%= @map_fail_uri %>"
  <%- end -%>

  # Per-user Nginx (PUN) configuration
  # NB: Apache will need sudo privs to control the PUNs
  #
  SetEnv OOD_PUN_STAGE_CMD "<%= @pun_stage_cmd %>"

  <%- if @pun_pre_hook_root_cmd -%>
  # Run a root level pre hook before starting nginx
  SetEnv OOD_PUN_PRE_HOOK_ROOT_CMD "<%= @pun_pre_hook_root_cmd %>"
  <%- if @pun_pre_hook_exports -%>
  # Environment variables to export to the PUN pre hook.
  SetEnv OOD_PUN_PRE_HOOK_EXPORTS "<%= @pun_pre_hook_exports %>"
  <%- end -%>

  <%- end -%>
  #
  # Below is used for sub-uri's this Open OnDemand portal supports
  #

  <%- if @public_uri && @public_root -%>
  # Serve up publicly available assets from local file system:
  #
  #     <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @public_uri %>/favicon.ico
  #     #=> <%= @public_root %>/favicon.ico
  #
  Alias "<%= @public_uri %>" "<%= @public_root %>"
  <Directory "<%= @public_root %>">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
  </Directory>
  <%- end -%>

  <%- if @node_uri -%>
  # Reverse proxy traffic to backend webserver through IP sockets:
  #
  #     <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @node_uri %>/HOST/PORT/index.html
  #     #=> http://HOST:PORT<%= @node_uri %>/HOST/PORT/index.html
  #
  <LocationMatch "^<%= @node_uri %>/(?<host><%= @host_regex %>)/(?<port>\d+)">
    <%- @auth.each do |line| -%>
    <%= line %>
    <%- end -%>

    # ProxyPassReverse implementation
    Header edit Location "^[^/]+//[^/]+" ""

    # ProxyPassReverseCookieDomain implemenation
    Header edit* Set-Cookie ";\s*(?i)Domain[^;]*" ""

    # ProxyPassReverseCookiePath implementation
    Header edit* Set-Cookie ";\s*(?i)Path[^;]*" ""
    Header edit  Set-Cookie "^([^;]+)" "$1; Path=<%= @node_uri %>/%{MATCH_HOST}e/%{MATCH_PORT}e"

    LuaHookFixups node_proxy.lua node_proxy_handler
  </LocationMatch>
  <%- end -%>

  <%- if @rnode_uri -%>
  # Reverse "relative" proxy traffic to backend webserver through IP sockets:
  #
  #     <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @rnode_uri %>/HOST/PORT/index.html
  #     #=> http://HOST:PORT/index.html
  #
  <LocationMatch "^<%= @rnode_uri %>/(?<host><%= @host_regex || "[^/]+" %>)/(?<port>\d+)(?<uri>/.*|)">
    <%- @auth.each do |line| -%>
    <%= line %>
    <%- end -%>

    # ProxyPassReverse implementation
    Header edit Location "^([^/]+//[^/]+)|(?=/)" "<%= @rnode_uri %>/%{MATCH_HOST}e/%{MATCH_PORT}e"

    # ProxyPassReverseCookieDomain implemenation
    Header edit* Set-Cookie ";\s*(?i)Domain[^;]*" ""

    # ProxyPassReverseCookiePath implementation
    Header edit* Set-Cookie ";\s*(?i)Path[^;]*" ""
    Header edit  Set-Cookie "^([^;]+)" "$1; Path=<%= @rnode_uri %>/%{MATCH_HOST}e/%{MATCH_PORT}e"

    LuaHookFixups node_proxy.lua node_proxy_handler
  </LocationMatch>
  <%- end -%>

  <%- if @pun_uri && @nginx_uri -%>
  # Reverse proxy traffic to backend PUNs through Unix domain sockets:
  #
  #     <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @pun_uri %>/dev/app/simulations/1
  #     #=> unix:/path/to/socket|http://localhost<%= @pun_uri %>/dev/app/simulations/1
  #
  SetEnv OOD_PUN_URI "<%= @pun_uri %>"
  <Location "<%= @pun_uri %>">
    <%- @auth.each do |line| -%>
    <%= line %>
    <%- end -%>

    ProxyPassReverse "http://localhost<%= @pun_uri %>"

    # ProxyPassReverseCookieDomain implementation (strip domain)
    Header edit* Set-Cookie ";\s*(?i)Domain[^;]*" ""

    # ProxyPassReverseCookiePath implementation (less restrictive)
    Header edit* Set-Cookie ";\s*(?i)Path\s*=(?-i)(?!\s*<%= @pun_uri %>)[^;]*" "; Path=<%= @pun_uri %>"

    SetEnv OOD_PUN_SOCKET_ROOT "<%= @pun_socket_root %>"
    SetEnv OOD_PUN_MAX_RETRIES "<%= @pun_max_retries %>"
    LuaHookFixups pun_proxy.lua pun_proxy_handler

    <%- if @analytics -%>
    SetEnv OOD_ANALYTICS_TRACKING_URL "<%= @analytics['url'] %>"
    SetEnv OOD_ANALYTICS_TRACKING_ID  "<%= @analytics['id']  %>"
    LuaHookLog analytics.lua analytics_handler
    <%- end -%>
  </Location>

  # Control backend PUN for authenticated user:
  # NB: See mod_ood_proxy for more details.
  #
  #    <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @nginx_uri %>/stop
  #    #=> stops the authenticated user's PUN
  #
  SetEnv OOD_NGINX_URI "<%= @nginx_uri %>"
  <Location "<%= @nginx_uri %>">
    <%- @auth.each do |line| -%>
    <%= line %>
    <%- end -%>

    LuaHookFixups nginx.lua nginx_handler
  </Location>
  <%- end -%>

  <%- if @root_uri -%>
  # Redirect root URI to specified URI
  #
  #     <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %>/
  #     #=> <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @root_uri %>
  #
  RedirectMatch ^/$ "<%= @root_uri %>"
  <%- end -%>

  <%- if @logout_uri && @logout_redirect -%>
  # Redirect logout URI to specified redirect URI
  #
  #     <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @logout_uri %>
  #     #=> <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @logout_redirect %>
  #
  Redirect "<%= @logout_uri %>" "<%= @logout_redirect %>"
  <%- end -%>

  <%- if @oidc_uri -%>
  # OpenID Connect redirect URI:
  #
  #     <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @oidc_uri %>
  #     #=> handled by mod_auth_openidc
  #
  <Location "<%= @oidc_uri %>">
    <%- @auth.each do |line| -%>
    <%= line %>
    <%- end -%>
  </Location>
  <%- end -%>

  <%- if @oidc_discover_uri && @oidc_discover_root -%>
  # Discover URI for OpenID Connect (used for multiple Id Providers):
  #
  #     <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @oidc_discover_uri %>
  #     #=> <%= @oidc_discover_root %>/
  #
  Alias "<%= @oidc_discover_uri %>" "<%= @oidc_discover_root %>"
  <Directory "<%= @oidc_discover_root %>">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
  </Directory>
  <%- end -%>

  <%- if @register_uri && @register_root %>
  # Register and/or unregister the mapping of an authenticated-user to a system-user
  # NB: This is not needed for regular expression mapping
  #
  #     <%= @ssl ? "https" : "http" %>://<%= @servername || "localhost" %>:<%= @port %><%= @register_uri %>
  #     #=> <%= @register_root %>/
  #
  Alias "<%= @register_uri %>" "<%= @register_root %>"
  <Directory "<%= @register_root %>">
    Options Indexes FollowSymLinks
    AllowOverride None

    <%- @auth.each do |line| -%>
    <%= line %>
    <%- end -%>
  </Directory>
  <%- end -%>
</VirtualHost>
