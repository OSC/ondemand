#
# Open OnDemand Portal
#
# Generated using ood-portal-generator version 0.8.0
#
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!                                    !!
# !!     DO NOT EDIT THIS FILE          !!
# !!                                    !!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
# This file is auto-generated by ood-portal-generator and will be over-written
# in future updates.
#
# 1. To modify this file, first update the global configuration file:
#
#      /etc/ood/config/ood_portal.yml
#
#    You can find more information about the ood-portal-generator configuration
#    at:
#
#      https://osc.github.io/ood-documentation/master/infrastructure/ood-portal-generator.html
#
# 2. Then build/install the updated Apache config with:
#
#      sudo /opt/ood/ood-portal-generator/sbin/update_ood_portal
#
# 3. Finally, restart Apache to have the changes take effect:
#
#      # For CentOS 6
#      sudo service httpd24-httpd condrestart
#      sudo service httpd24-htcacheclean condrestart
#
#      # For CentOS 7
#      sudo systemctl try-restart httpd24-httpd.service httpd24-htcacheclean.service
#
#      # For CentOS 8
#      sudo systemctl try-restart httpd.service htcacheclean.service
#

# Listen should always be one of:
#     - <port>
#     - <ipv4>:<port>
#     - <ipv6>:<port>
#
Listen 8080

# Redirect all http traffic to the https Open OnDemand portal URI
#     http://*:8080
#     #=> https://test.proxy.name:8080
#
<VirtualHost *:80>
  RewriteEngine On
  RewriteRule ^(.*) https://test.proxy.name:8080$1 [R=301,NE,L]
</VirtualHost>

# The Open OnDemand portal VirtualHost
#
<VirtualHost *:8080>
  ServerName test.server.name

  ErrorLog  "/path/to/my/logs/test.server.name_error_ssl.log"
  CustomLog "/path/to/my/logs/test.server.name_access_ssl.log" combined

  RewriteEngine On
  RewriteCond %{HTTP_HOST} !^(test.proxy.name(:8080)?)?$ [NC]
  RewriteRule ^(.*) https://test.proxy.name:8080$1 [R=301,NE,L]

  # Support maintenance page during outages of OnDemand
  RewriteEngine On
  RewriteCond /var/www/configured/public/maintenance/index.html -f
  RewriteCond /etc/ood/maintenance.enable -f
  RewriteCond %{REQUEST_URI} !/public/maintenance/.*$
  RewriteCond %{REMOTE_ADDR} !^192\.168\.0\..*
  RewriteCond %{REMOTE_ADDR} !^192\.168\.1\..*
  RewriteRule ^.*$ /assets/maintenance/index.html [R=503,L]
  ErrorDocument 503 /assets/maintenance/index.html
  Header Set Cache-Control "max-age=0, no-store"

  Header always set Content-Security-Policy "frame-ancestors https://test.server.name;"
  Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"

  SSLEngine On
  SSLCertificateFile "/etc/pki/tls/certs/www.example.com.crt"
  SSLCertificateKeyFile "/etc/pki/tls/private/www.example.com.key"

  # Lua configuration
  #
  LuaRoot "/some/other/mod_ood_proxy/lib"
  LogLevel lua_module:debug

  # Log authenticated user requests (requires min log level: info)
  LuaHookLog logger.lua logger

  # Authenticated-user to system-user mapping configuration
  #
  SetEnv OOD_USER_MAP_CMD "/opt/my_user_map_cmd"
  SetEnv OOD_USER_ENV "OIDC_CLAIM_preferred_username"
  SetEnv OOD_MAP_FAIL_URI "/register"

  # Per-user Nginx (PUN) configuration
  # NB: Apache will need sudo privs to control the PUNs
  #
  SetEnv OOD_PUN_STAGE_CMD "sudo /opt/some/other/nginx_stage"

  # Run a root level pre hook before starting nginx
  SetEnv OOD_PUN_PRE_HOOK_ROOT_CMD "/opt/hpc-site/ood_pun_prehook"
  # Environment variables to export to the PUN pre hook.
  SetEnv OOD_PUN_PRE_HOOK_EXPORTS "OIDC_ACCESS_TOKEN,OIDC_CLAIM_EMAIL"

  #
  # Below is used for sub-uri's this Open OnDemand portal supports
  #

  # Serve up publicly available assets from local file system:
  #
  #     https://test.server.name:8080/assets/favicon.ico
  #     #=> /var/www/configured/public/favicon.ico
  #
  Alias "/assets" "/var/www/configured/public"
  <Directory "/var/www/configured/public">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
  </Directory>

  # Reverse proxy traffic to backend webserver through IP sockets:
  #
  #     https://test.server.name:8080/configured-node/HOST/PORT/index.html
  #     #=> http://HOST:PORT/configured-node/HOST/PORT/index.html
  #
  <LocationMatch "^/configured-node/(?<host>[\w.-]+\.site\.edu)/(?<port>\d+)">
    AuthType openid-connect
    Require valid-user

    # ProxyPassReverse implementation
    Header edit Location "^[^/]+//[^/]+" ""

    # ProxyPassReverseCookieDomain implemenation
    Header edit* Set-Cookie ";\s*(?i)Domain[^;]*" ""

    # ProxyPassReverseCookiePath implementation
    Header edit* Set-Cookie ";\s*(?i)Path[^;]*" ""
    Header edit  Set-Cookie "^([^;]+)" "$1; Path=/configured-node/%{MATCH_HOST}e/%{MATCH_PORT}e"

    LuaHookFixups node_proxy.lua node_proxy_handler
  </LocationMatch>

  # Reverse "relative" proxy traffic to backend webserver through IP sockets:
  #
  #     https://test.server.name:8080/configured-rnode/HOST/PORT/index.html
  #     #=> http://HOST:PORT/index.html
  #
  <LocationMatch "^/configured-rnode/(?<host>[\w.-]+\.site\.edu)/(?<port>\d+)(?<uri>/.*|)">
    AuthType openid-connect
    Require valid-user

    # ProxyPassReverse implementation
    Header edit Location "^([^/]+//[^/]+)|(?=/)" "/configured-rnode/%{MATCH_HOST}e/%{MATCH_PORT}e"

    # ProxyPassReverseCookieDomain implemenation
    Header edit* Set-Cookie ";\s*(?i)Domain[^;]*" ""

    # ProxyPassReverseCookiePath implementation
    Header edit* Set-Cookie ";\s*(?i)Path[^;]*" ""
    Header edit  Set-Cookie "^([^;]+)" "$1; Path=/configured-rnode/%{MATCH_HOST}e/%{MATCH_PORT}e"

    LuaHookFixups node_proxy.lua node_proxy_handler
  </LocationMatch>

  # Reverse proxy traffic to backend PUNs through Unix domain sockets:
  #
  #     https://test.server.name:8080/my_pun_apps/dev/app/simulations/1
  #     #=> unix:/path/to/socket|http://localhost/my_pun_apps/dev/app/simulations/1
  #
  SetEnv OOD_PUN_URI "/my_pun_apps"
  <Location "/my_pun_apps">
    AuthType openid-connect
    Require valid-user

    ProxyPassReverse "http://localhost/my_pun_apps"

    # ProxyPassReverseCookieDomain implementation (strip domain)
    Header edit* Set-Cookie ";\s*(?i)Domain[^;]*" ""

    # ProxyPassReverseCookiePath implementation (less restrictive)
    Header edit* Set-Cookie ";\s*(?i)Path\s*=(?-i)(?!\s*/my_pun_apps)[^;]*" "; Path=/my_pun_apps"

    SetEnv OOD_PUN_SOCKET_ROOT "/path/to/pun/sockets"
    SetEnv OOD_PUN_MAX_RETRIES "3000"
    LuaHookFixups pun_proxy.lua pun_proxy_handler

    SetEnv OOD_ANALYTICS_TRACKING_URL "http://www.google-analytics.com/collect"
    SetEnv OOD_ANALYTICS_TRACKING_ID  "analytics-id"
    LuaHookLog analytics.lua analytics_handler
  </Location>

  # Control backend PUN for authenticated user:
  # NB: See mod_ood_proxy for more details.
  #
  #    https://test.server.name:8080/my_pun_controller/stop
  #    #=> stops the authenticated user's PUN
  #
  SetEnv OOD_NGINX_URI "/my_pun_controller"
  <Location "/my_pun_controller">
    AuthType openid-connect
    Require valid-user

    LuaHookFixups nginx.lua nginx_handler
  </Location>

  # Redirect root URI to specified URI
  #
  #     https://test.server.name:8080/
  #     #=> https://test.server.name:8080/other/dashboard
  #
  RedirectMatch ^/$ "/other/dashboard"

  # Redirect logout URI to specified redirect URI
  #
  #     https://test.server.name:8080/log_me_out
  #     #=> https://test.server.name:8080/oidc?logout=mylogout
  #
  Redirect "/log_me_out" "/oidc?logout=mylogout"

  # OpenID Connect redirect URI:
  #
  #     https://test.server.name:8080/oidc
  #     #=> handled by mod_auth_openidc
  #
  <Location "/oidc">
    AuthType openid-connect
    Require valid-user
  </Location>

  # Discover URI for OpenID Connect (used for multiple Id Providers):
  #
  #     https://test.server.name:8080/discover
  #     #=> /var/www/ood/discover/
  #
  Alias "/discover" "/var/www/ood/discover"
  <Directory "/var/www/ood/discover">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
  </Directory>


  # Register and/or unregister the mapping of an authenticated-user to a system-user
  # NB: This is not needed for regular expression mapping
  #
  #     https://test.server.name:8080/register
  #     #=> /var/www/ood/register/
  #
  Alias "/register" "/var/www/ood/register"
  <Directory "/var/www/ood/register">
    Options Indexes FollowSymLinks
    AllowOverride None

    AuthType openid-connect
    Require valid-user
  </Directory>
</VirtualHost>
