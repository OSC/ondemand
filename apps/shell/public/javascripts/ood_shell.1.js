
// Object that defines a terminal element
function OodShell(element, url, prefs) {
  this.element = element;
  this.url     = url;
  this.prefs   = prefs || {};
  this.socket  = null;
  this.term    = null;
}

OodShell.prototype.createTerminal = function () {
  this.socket = new WebSocket(this.url);
  this.socket.onopen    = this.runTerminal.bind(this);
  this.socket.onmessage = this.getMessage.bind(this);
  this.socket.onclose   = this.closeTerminal.bind(this);
};

OodShell.prototype.runTerminal = function () {
  var that = this;

  // Set backing store that hterm uses to read/write preferences
  hterm.defaultStorage = new lib.Storage.Memory();

  // Create an instance of hterm.Terminal
  this.term = new hterm.Terminal();

  // FIXME:
  // instead of changing theme here, idealy we would initialize
  // the custom storage used by preferences to associate a profile_id with a set of preferences
  // then above we would do new hterm.Terminal(profile_id)
  // and when we change the theme we would do
  // term.setProfile(profile_id)
  //
  // but as you see from https://gist.github.com/russelldavies/5745528 as an example
  // there isn't a clear approach to doing this because the way to create a profile appears to be through a term object
  // though we could create a throw-away term object as an experiment
  //
  // for now we change the theme here but add guard clauses to hterm when screen doesn't exist yet
  this.changeTheme(this.prefs)

  // Handler that fires when terminal is initialized and ready for use
  this.term.onTerminalReady = function () {
    // Create a new terminal IO object and give it the foreground.
    // (The default IO object just prints warning messages about unhandled
    // things to the JS console.)
    var io = this.io.push();

    // Set up event handlers for io
    io.onVTKeystroke    = that.onVTKeystroke.bind(that);
    io.sendString       = that.sendString.bind(that);
    io.onTerminalResize = that.onTerminalResize.bind(that);

    // FIXME: can't changeTheme here because the default theme which is dark flashes first
    // Set preferences for terminal
    // that.changeTheme(that.prefs)

    // Capture all keyboard input
    this.installKeyboard();
  };

  // Patch cursor setting
  this.term.options_.cursorVisible = true;

  // Connect terminal to sacrificial DOM node
  this.term.decorate(this.element);

  // Warn user if he/she unloads page
  window.onbeforeunload = function() {
    return 'Leaving this page will terminate your terminal session.';
  };
};

OodShell.prototype.getMessage = function (ev) {
  this.term.io.print(ev.data);
}

OodShell.prototype.closeTerminal = function (ev) {
  var errorDiv;

  // Do not need to warn user if he/she unloads page
  window.onbeforeunload = null;

  // Inform user they lost connection
  if ( this.term === null ) {
    errorDiv = document.createElement('div');
    errorDiv.className = 'error';
    errorDiv.innerHTML = 'Failed to establish a websocket connection. Be sure you are using a browser that supports websocket connections.';
    this.element.appendChild(errorDiv);
  } else {
    this.term.io.print('\r\nYour connection to the remote server has been terminated.');
  }
}

OodShell.prototype.onVTKeystroke = function (str) {
  // Do something useful with str here.
  // For example, Secure Shell forwards the string onto the NaCl plugin.
  this.socket.send(JSON.stringify({
    input: str
  }));
};

OodShell.prototype.sendString = function (str) {
  // Just like a keystroke, except str was generated by the
  // terminal itself.
  // Most likely you'll do the same this as onVTKeystroke.
  this.onVTKeystroke(str)
};

OodShell.prototype.changeTheme = function (theme) {
  for (var k in theme) {
    this.term.prefs_.set(k, theme[k]);
  }
}

OodShell.prototype.onTerminalResize = function (columns, rows) {
  // React to size changes here.
  // Secure Shell pokes at NaCl, which eventually results in
  // some ioctls on the host.
  this.socket.send(JSON.stringify({
    resize: {
      cols: columns,
      rows: rows
    }
  }));
};
