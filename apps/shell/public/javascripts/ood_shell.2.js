// Object that defines a terminal element
function OodShell(element, url, profile) {
  this.element = element;
  this.url     = url;
  this.profile   = profile || "default";
  this.socket  = null;
  this.term    = null;
}

OodShell.prototype.createTerminal = function () {
  this.verifyAuthorization();
  this.socket = new WebSocket(this.url);
  this.socket.onopen    = this.runTerminal.bind(this);
  this.socket.onmessage = this.getMessage.bind(this);
  this.socket.onclose   = this.closeTerminal.bind(this);
};

function displayErrorMessage (errorMessage) {
  var errorDiv;
  errorDiv = document.createElement('div');
  errorDiv.id = 'errorMessageBox';
  errorDiv.className = 'error';
  errorDiv.innerHTML = errorMessage;
  document.getElementById('terminal').appendChild(errorDiv);
}

OodShell.prototype.verifyAuthorization = function () {
  // Build request url
  var verifyAuthUrl = this.url;
  verifyAuthUrl = verifyAuthUrl.replace('wss','https');
  verifyAuthUrl = verifyAuthUrl.replace('/ssh','/authCheck');
  verifyAuthUrl = verifyAuthUrl.replace('?csrf=', '/');
  // Send and handle request
  var xhr = new XMLHttpRequest();
  xhr.open("get", verifyAuthUrl);
  xhr.onload = function () {
    if (xhr.response) {
      displayErrorMessage(xhr.response);
    }
  };
  xhr.onerror = function () {
    console.log("Error verifying authorization: ", xhr.response);
  };
  xhr.send();
}

OodShell.prototype.runTerminal = function () {
  var that = this;

  // Create an instance of hterm.Terminal
  this.term = new hterm.Terminal({ profileId: this.profile });

  // Handler that fires when terminal is initialized and ready for use
  this.term.onTerminalReady = function () {
    // Create a new terminal IO object and give it the foreground.
    // (The default IO object just prints warning messages about unhandled
    // things to the JS console.)
    var io = this.io.push();

    // Set up event handlers for io
    io.onVTKeystroke    = that.onVTKeystroke.bind(that);
    io.sendString       = that.sendString.bind(that);
    io.onTerminalResize = that.onTerminalResize.bind(that);

    // Capture all keyboard input
    this.installKeyboard();
  };

  // Patch cursor setting
  this.term.options_.cursorVisible = true;

  // Connect terminal to sacrificial DOM node
  this.term.decorate(this.element);

  // Warn user if he/she unloads page
  window.onbeforeunload = function() {
    return 'Leaving this page will terminate your terminal session.';
  };
};

OodShell.prototype.getMessage = function (ev) {
  this.term.io.print(ev.data);
}

OodShell.prototype.closeTerminal = function (ev) {
  // Do not need to warn user if they unload the page
  window.onbeforeunload = null;

  // Inform user that they cannot connect to websocket. Do not add another error message if one already exists
  if ( this.term === null && !document.getElementById('errorMessageBox')) {
    displayErrorMessage('Failed to establish a websocket connection. Be sure you are using a browser that supports websocket connections.');
  } else {
    this.term.io.print('\r\nYour connection to the remote server has been terminated.');
  }
}

OodShell.prototype.onVTKeystroke = function (str) {
  // Do something useful with str here.
  // For example, Secure Shell forwards the string onto the NaCl plugin.
  this.socket.send(JSON.stringify({
    input: str
  }));
};

OodShell.prototype.sendString = function (str) {
  // Just like a keystroke, except str was generated by the
  // terminal itself.
  // Most likely you'll do the same this as onVTKeystroke.
  this.onVTKeystroke(str)
};

OodShell.prototype.changeTheme = function (theme) {
  this.term.setProfile(theme);
}

OodShell.prototype.onTerminalResize = function (columns, rows) {
  // React to size changes here.
  // Secure Shell pokes at NaCl, which eventually results in
  // some ioctls on the host.
  this.socket.send(JSON.stringify({
    resize: {
      cols: columns,
      rows: rows
    }
  }));
};
