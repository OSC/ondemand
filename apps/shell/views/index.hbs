<!DOCTYPE html>
<html lang="en">

<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="{{baseURI}}/stylesheets/bootstrap-theme.min.css">
  <link rel="stylesheet" href="{{baseURI}}/stylesheets/bootstrap.min.css">

  <title>Shell - {{ siteTitle }}</title>

  <link rel="stylesheet" href="{{baseURI}}/stylesheets/style.css">

  <script src="{{baseURI}}/javascripts/lodash-4.17.21/lodash.min.js"></script>
  <script src="{{baseURI}}/javascripts/hterm_all_1.85.js"></script>
  <script src="{{baseURI}}/javascripts/ood_shell.1.js"></script>
  <script src="{{baseURI}}/javascripts/themes.js"></script>
</head>

<body>
  <div id="terminal">

    <nav class="navbar navbar-inverse navbar-static-top navbar-expand" role="navigation">
      <div class="container-fluid" >
      <ul class="navbar-nav left-padding-none">
            <li class="nav-item custom-host">
            <label id="host" class="label">Host: {{host}} </label>
          </li>
      </ul>
            <ul class="navbar-nav left-padding-some">
          <li class="nav-item hidden-xs">
            <label id="directory" class="label hidden-xs">{{#if dir}}Initial directory: {{dir}}{{/if}}</label>
          </li>
      </ul>
          <ul class="navbar-nav form-inline navbar-right left-padding-none">
          <li class="nav-item">
            <div class="form-group custom-form">
            <label class="label" for="colors">Themes:</label>
          <select id="colors" class="form-control custom-select">
        <option value="default">Default</option>
        <optgroup label="Bright">
        <option value="CLRS">CLRS</option>
        <option value="Github">Github</option>
        <option value="Solarized Light">Solarized Light</option>
        <option value="Tomorrow">Tomorrow</option>
        </optgroup>
        <optgroup label="Dark">
        <option value="Cobalt">Cobalt</option>
        <option value="idle Fingers">Idle Fingers</option>
        <option value="Monokai">Monokai</option>
        <option value="Pastel Dark">Pastel Dark</option>
        <option value="Solarized Dark">Solarized Dark</option>
        <option value="Tomorrow Night Blue">Tomorrow Night Blue</option>
        <option value="Tomorrow Night Bright">Tomorrow Night Bright</option>
        <option value="Tomorrow Night Eighties">Tomorrow Night Eighties</option>
        <option value="Tomorrow Night">Tomorrow Night</option>
        </optgroup>
      </select>
            </div>
          </li>
        </ul>
  </nav>
  </div>
</body>

<script>
  // the structure we should want is
  // themes {
  //   "name": {
  //     theme
  //   }
  // }
  var themes = {};
  [...darkThemes, ...brightThemes].forEach((theme) => {
    themes[theme.name] = {
      'use-default-window-copy': true,
      'ctrl-v-paste': true,
      'ctrl-c-copy': true,
      'cursor-blink': false,
      'background-color': theme.scheme.background,
      'foreground-color': theme.scheme.text,
      'color-palette-overrides': theme.scheme.colorPaletteOverrides,
      'cursor-color': theme.scheme.cursor
    }
  });
  themes["default"] = {
    'use-default-window-copy': true,
    'ctrl-v-paste': true,
    'ctrl-c-copy': true,
    'cursor-blink': false,
  }

  // Set backing store that hterm uses to read/write preferences
  hterm.defaultStorage = new lib.Storage.Memory();

  // profile preferences look like this:
  //
  // "/hterm/profiles/default/ctrl-c-copy": "true"
  // "/hterm/profiles/default/ctrl-v-paste": "true"
  // "/hterm/profiles/default/use-default-window-copy": "true"
  //
  // is there an underscore method? lodash perhaps
  //
  // lodash: once to ensure it is only executed one time
  //
  // _snakeCase the theme profile name?
  _.forIn(themes, (theme, name) => {
    _.forIn(theme, (value, key) => {
      hterm.defaultStorage.setItem(`/hterm/profiles/${name}/${key}`, value);
    })
  });

  var storage = window.localStorage;

  schemeSelect = document.getElementById("colors");


  var profile = "default";

  if (storage.getItem('scheme') !== null) {
    profile = storage.getItem('scheme');
    schemeSelect.value = profile;
  }

  setupHterm = function () {
    // Global variables that define the terminal
      var terminalContainer = document.getElementById('terminal'),
      webSocketUrl      = urlWithToken();

    window.oodShell = new OodShell(terminalContainer, webSocketUrl, profile);
    oodShell.createTerminal();
  }

  window.onload = function() {
    lib.init(setupHterm);
  };

  var urlWithToken = function(){
    var base = document.URL.replace(/^http/, 'ws').replace(/#.*$/, '');
    var separator = '?';

    if(base.includes('?')){
      separator = '&';
    }

    return base + separator + "csrf={{csrfToken}}";
  }

schemeSelect.addEventListener("change", function(ev) {
  var choice  = ev.target.value;
  storage.setItem('scheme', choice);
  oodShell.changeTheme(choice);
})
</script>

</html>
