// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/sstephenson/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require bootstrap-sprockets
//= require dataTables/jquery.dataTables
//= require dataTables/bootstrap/3/jquery.dataTables.bootstrap
//= require lightbox2/javascripts/lightbox
//= require oboe/oboe-browser.min
//= require datatables_plugins/api/processing
//= require_tree .

function human_time(seconds_total) {
  var hours = parseInt(seconds_total / 3600), 
      minutes = parseInt((seconds_total - (hours * 3600)) / 60),
      seconds = parseInt((seconds_total - (3600 * hours) - (60 * minutes))),
      hours_str = ('' + hours).padStart(2, "0"),
      minutes_str = ('' + minutes).padStart(2, "0"),
      seconds_str = ('' + seconds).padStart(2, "0");

  return hours_str + ":" + minutes_str + ":" + seconds_str;
}

function fetch_table_data(table, options){
  if (!options) options = {};
  if (!options.doneCallback) options.doneCallback = null;
  if (!options.base_uri) options.base_uri = window.location.pathname;

  oboe({
    url: options.base_uri + '/jobs.json?'+get_request_params(),
    headers: {
      'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content'),
      'X-Requested-With': 'XMLHttpRequest',
      'Content-Type': 'application/json'
    }
  }).start(function(){
    table.processing(true);
  }).node('data.*', function(jobs){
    // data is an array of arrays, where each array has one or more jobs
    // this is called once for each array of jobs
    table.rows.add(jobs).draw();
    table.processing(false);
  }).node('errors.*', function(error){
    // errors is a single array of error messages
    // this is called once for each error msg
    show_errors([error]);
  }).done(function(){
    table.processing(false);

    if(options.doneCallback){
       options.doneCallback();
    }
  }).fail(function(errorReport){
    if(errorReport.statusCode != null){
      show_errors(["Request for jobs failed with status code: " + errorReport.statusCode]);
    }
    else{
      //FIXME: this error appears even when the above 404 occurs, for example
      // that is because a 404 responce for json request returns a plain text response
      // and parsing that as json fails
       show_errors(["Request for jobs failed due to body parsing error."])
    }

    table.processing(false);
  });
}

function status_label(status){
  var label = "Undetermined", labelclass = "label-default";

  if(status == "completed"){
    label = "Completed";
    labelclass = "label-success";
  }

  if(status == "running"){
    label = "Running";
    labelclass = "label-primary";
  }
  if(status == "queued"){
    label = "Queued";
    labelclass = "label-info";
  }
  if(status == "queued_held"){
    label = "Hold";
    labelclass = "label-warning";
  }
  if(status == "suspended"){
    label = "Suspend";
    labelclass = "label-warning";
  }

  return "<span class='label " + labelclass + "'>" + label + "</span></div>";
}

function create_datatable(options){
    if (!options) options = {};
    if (!options.drawCallback) options.drawCallback = null;
    if (!options.base_uri) options.base_uri = window.location.pathname;

    $("#selected-filter-label").text($("#filter-id-"+filter_id).text());
    $("#selected-cluster-label").text($("#cluster-id-"+cluster_id).text());

    $("#" + filter_id).addClass("active");
    var table = $('#job_status_table').DataTable({
        autoWidth: true,            // Automatically calculate column width
        "lengthMenu": [ [10, 25, 50, -1], [10, 25, 50, "All"] ], // Manually set size of particular columns
        "bStateSave": true,         // Save user selected table state
        "aaSorting": [],            // Turn off auto sort.
        "pageLength": 50,           // Set the number of rows
        "oLanguage": {
            "sSearch": "Filter: "
        },
        "fnCreatedRow": function( nRow, aData, iDataIndex ) {
          $(nRow).children("td").css("overflow", "hidden");
          $(nRow).children("td").css("white-space", "nowrap");
          $(nRow).children("td").css("text-overflow", "ellipsis");
        },
        "fnInitComplete":           function( oSettings ) {
                                        for ( var i=0, iLen=oSettings.aoData.length ; i<iLen ; i++ )
                                        {
                                            // Add info background to user rows
                                            if (oSettings.aoData[i]._aData.username == JobStatusapp.username) {
                                                oSettings.aoData[i].nTr.className += " bg-info";
                                            }
                                        }
                                    },
        processing: true,           // Add the "processing" while json is being downloaded.
        drawCallback: function(settings){
          if(options.drawCallback){
            options.drawCallback(settings);
          }
        },
        columns: [
            {
                "orderable":        false,
                "data":             "extended_available",
                "defaultContent":   '',
                "width":            "20px",
                "searchable":       false,
                "fnCreatedCell":    function(nTd, data) {
                                        if (data) {
                                            $(nTd).addClass('details-control');
                                        }
                                    },
                "render":           function() {
                                        return "";
                                    }
            },
            {
                data:               "pbsid",
                className:          "small",
                "autoWidth":        true,
                "render":           function(data) {
                    return "<span title="+data+">"+data+"</span>";
                }
            },
            {
                data:               "jobname",
                className:          "small",
                width:              '25%',
                "render":           function(data) {
                    return "<span title="+data+">"+data+"</span>";
                }
            },
            {
                data:               "username",
                className:          "small",
                "autoWidth":        true,
                "render":           function(data) {
                    return "<span title="+data+">"+data+"</span>";
                }
            },
            {
                data:               "account",
                className:          "small",
                "autoWidth":        true,
                "render":           function(data) {
                    return "<span title="+data+">"+data+"</span>";
                }
            },
            {
                data:               "walltime_used",
                className:          "small text-right",
                "autoWidth":        true,
                "render":           function(data) {
                    return "<span title="+human_time(data)+">"+human_time(data)+"</span>";
                }
            },
            {
                data:               "queue",
                className:          "small",
                "autoWidth":        true,
                "render":           function(data) {
                    return "<span title="+data+">"+data+"</span>";
                }
            },
            {
                data:               "status",
                className:          "small status-label",
                "autoWidth":        true,
                "render":           function(data) {
                    return status_label(data);
                    //return "<span style='color: red' title="+data+">"+data+"</span>";
                }
            },
            {
                data:               "cluster_title",
                className:          "small",
                "autoWidth":        true
            }
        ]
    }).on( 'error.dt', function ( e, settings, techNote, message ) {
        // Event is fired when there's an error loading or parsing the datatable.
        show_errors(['There was an error getting data from the remote server.']);
    } );

    // Override the Datatables default error message functionality
    //   https://datatables.net/reference/event/error
    $.fn.dataTable.ext.errMode = 'none'

    // Add event listener for opening and closing details
    $('#job_status_table tbody').on('click', '.details-control', function () {
        var tr = $(this).closest('tr');
        var row = table.row( tr );

        if ( row.child.isShown() ) {
            // This row is already open - close it
            row.child.hide();
            tr.removeClass('shown');
        }
        else {
            // Open this row
            row.child( format(row.data()) ).show();
            tr.addClass('shown');
            $.getJSON(options.base_uri + '/json?pbsid='+row.data().pbsid+'&cluster='+row.data().cluster , function(data) {
                // Add the data panel to the view
                $( "div[data-jobid='"+row.data().pbsid+"']").hide().html(data.html).fadeIn(250);
                // Update the status label in the parent row
                tr.find(".status-label").html(data.status);
            })
              .fail(function(jqXHR, textStatus, errorThrown) {
                  var error_panel = '<div class="alert alert-danger" role="alert">' +
                                    '  <strong>Error:</strong> The information could not be displayed. ' +
                                    '  <em>' + jqXHR.status + ' (' + errorThrown + ')</em>' +
                                    '</div>';
                  $( "div[data-jobid='"+row.data().pbsid+"']").hide().html(error_panel).fadeIn(250);
              });
        }
    });

    table.columns.adjust().draw();

    return table;
}



/* Formatting function for dropdown row. */
function format ( d ) {
    // `d` is the original data object for the row
    return          '<table>' +
                    '   <div class="panel panel-default">' +
                        display_job_info(d) +
                        display_node_rows(d) +
                    '   </div>' +
                    '</table>';
}

/* A function that builds a job data view */
function display_job_info( d ) {
    return          '<tr class="col-xs-12>' +
                    '   <div class="col-xs-12">' +
                    '       <tr><div class="job_data" data-jobid="' + d.pbsid + '"></div></tr>' +
                    '   </div>' +
                    '</tr>';
}

/* Build the ganglia images view */
function display_node_rows( d ) {
    var rows = "";
    // Ganglia accepts timestamps in seconds, not millis.
    var start = d.starttime;
    if (d.nodes != null && has_ganglia(d.cluster)) {
        for (node in d.nodes) {
            var node_num = d.nodes[node];
            rows += '<div class="col-md-12">' +
                    '   <tr>' +
                    '       <td>' +
                    '           <div class="panel panel-default">' +
                    '              <div class="panel-heading"><h3 class="panel-title">' + node_num + ' <span class="pull-right">' + d.pbsid + '</span></h3></div>' +
                    '              <div class="panel-body">' +
                    '                   <a href="'+ build_ganglia_link(d.cluster, start, 'cpu_report', node_num, 'large') +'" data-lightbox="cpu-report" data-title="CPU Report '+node_num+'"><img class="img-responsive col-lg-3 col-md-3 col-sm-6 col-xs-6" src="'+build_ganglia_link(d.cluster, start, 'cpu_report', node_num, 'small')+'" /></a>' +
                    '                   <a href="'+ build_ganglia_link(d.cluster, start, 'load_report', node_num, 'large') +'" data-lightbox="load-report" data-title="Load Report '+node_num+'"><img class="img-responsive col-lg-3 col-md-3 col-sm-6 col-xs-6" src="'+build_ganglia_link(d.cluster, start, 'load_report', node_num, 'small')+'" /></a>' +
                    '                   <a href="'+ build_ganglia_link(d.cluster, start, 'mem_report', node_num, 'large') +'" data-lightbox="mem-report" data-title="Memory Report '+node_num+'"><img class="img-responsive col-lg-3 col-md-3 col-sm-6 col-xs-6" src="'+build_ganglia_link(d.cluster, start, 'mem_report', node_num, 'small')+'" /></a>' +
                    '                   <a href="'+ build_ganglia_link(d.cluster, start, 'network_report', node_num, 'large') +'" data-lightbox="network-report" data-title="Network Report '+node_num+'"><img class="img-responsive col-lg-3 col-md-3 col-sm-6 col-xs-6" src="'+build_ganglia_link(d.cluster, start, 'network_report', node_num, 'small')+'" /></a>' +
                    '              </div>' +
                    '           </div>' +
                    '       </td>' +
                    '   </tr>' +
                    '</div>';
        }
    }
    return rows;
}

/* Add errors from an array to the #ajax-error-message div and remove hidden attribute */
function show_errors(errors) {
    for (var i = 0; i < errors.length; i++) {
        $("#ajax-error-message-text").append("<div>"+errors[i]+"</div>");
    }
    $("#ajax-error-message").removeAttr('hidden');
}

function get_request_params() {
    return jQuery.param({
        jobcluster: cluster_id,
        jobfilter:  filter_id
    });
}

function set_filter_id(id) {
    localStorage.setItem('jobfilter', id);
    filter_id = id;
    reload_page();
}

function set_cluster_id(id) {
    localStorage.setItem('jobcluster', id);
    cluster_id = id;
    reload_page();
}

function reload_page() {
    window.location = '?' + get_request_params();
}
