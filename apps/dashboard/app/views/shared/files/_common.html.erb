<%= javascript_pack_tag 'files/clipboard' %>
<%= javascript_pack_tag 'files/datatable' %>
<%= javascript_pack_tag 'files/common' %>
<%= javascript_pack_tag 'files/fileops' if filesApp == true %>
<%= javascript_pack_tag 'files/uppy' if filesApp == true %>

<script>
const csrf_token = document.querySelector('meta[name="csrf-token"]').content;
const filesApp = "<%= filesApp %>";
// this uses event delegation so it captures events even if dom element is recreated
var clipboardjs = new ClipboardJS('#copy-path');

// contains ruby, must stay here.
history.replaceState({
  currentDirectory: '<%= @path %>',
  currentDirectoryUrl: '<%= files_path(@path) %>',
  currentDirectoryUpdatedAt: '<%= Time.now.to_i %>'
}, null);

// contains ruby, must stay here.
<% unless alert %>
// initial data load
reloadTable();
<% end %>

// contains ruby, must stay here.
$('#path-breadcrumbs').on('click', '#goto-btn', function(){
  Swal.fire({
    title: 'Change Directory',
    input: 'text',
    inputLabel: 'Path',
    inputValue: history.state.currentDirectory,
    inputAttributes: {
      spellcheck: 'false',
    },
    showCancelButton: true,
    inputValidator: (value) => {
      if (! value || ! value.startsWith('/')) {
        // TODO: validate filenames against listing
        return 'Provide an absolute pathname'
      }
    }
  })
  .then((result) => result.isConfirmed ? Promise.resolve(result.value) : Promise.reject('cancelled'))
  .then((pathname) => goto('<%= files_path('/') %>' + pathname))
});

// contains ruby, must stay here.
function transferFiles(files, action, summary){
  loading(_.startCase(summary));

  return fetch('<%= transfers_path(format: "json") %>', {
    method: 'post',
    body: JSON.stringify({
      command: action,
      files: files
    }),
    headers: { 'X-CSRF-Token': csrf_token }
  })
  .then(response => dataFromJsonResponse(response))
  .then((data) => {

    if(! data.completed){
      // was async, gotta report on progress and start polling
      reportTransfer(data);
    }
    else {
      if(data.target_dir == history.state.currentDirectory){
        reloadTable();
      }
    }

    if(action == 'mv' || action == 'cp'){
      clearClipboard();
      updateViewForClipboard();
    }
  })
  .then(() => doneLoading())
  .catch(e => alertError('Error occurred when attempting to ' + summary, e.message))
}

</script>
