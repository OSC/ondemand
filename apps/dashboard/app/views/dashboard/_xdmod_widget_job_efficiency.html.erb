<div id="jobsEfficiencyReportPanelDiv"></div>
<div id="coreHoursEfficiencyReportPanelDiv"></div>

<script id="job-efficiency-template" type="text/x-handlebars-template">
<div class="panel panel-default">
  <div class="panel-heading">
    <a href="{{xdmod_url}}" class="pull-right">XDMoD <span class="fa fa-external-link-square-alt"></span></a>
    <h3 class="panel-title">{{title}}</h3>
  </div>
  <div class="panel-body">
  {{#if error}}
    <div class="alert alert-danger">{{error}} Please ensure you are <a href="{{xdmod_url}}">logged into XDMoD first</a>, and then try again.</div>
  {{else}}
    {{#if loading}}
      <p>LOADING...</p>
    {{else}}
    <p style="font-weight: bold; display: flex; justify-content: space-between"><span class="text-success">{{good_percent}}% efficient</span> <span class="text-danger">{{bad_percent}}% inefficent</span></p>
    <div class="progress progress-custom">
      <div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="{{good_percent}}" aria-valuemin="0" aria-valuemax="100" style="width: {{good_percent}}%">
      </div>
      <div class="progress-bar progress-bar-danger" role="progressbar" aria-valuenow="{{bad_percent}}" aria-valuemin="0" aria-valuemax="100" style="width: {{bad_percent}}%">
      </div>
    </div>
    <p class="text-center">
      <span class="text-danger">{{count_bad}} inefficent {{unit}} </span> &frasl; {{count}} total {{unit}}
    </p>
    {{/if}}
  {{/if}}
  </div>
</div>
</script>


<script>
(function(){

 var startOfYear = '<%= Date.today.beginning_of_year.strftime("%Y-%m-%d") %>',
     thirtyDaysAgo = '<%= 30.days.ago.strftime("%Y-%m-%d") %>',
     today = '<%= Date.today.strftime("%Y-%m-%d") %>';

var jobsUrl = new URL('<%= Configuration.xdmod_host %>/rest/v1/warehouse/aggregatedata');
jobsUrl.searchParams.set('_dc', Date.now());

jobsUrl.searchParams.set('start', 0);
jobsUrl.searchParams.set('limit', 1);
jobsUrl.searchParams.set('config', JSON.stringify({
  "realm":"JobEfficiency",
  "group_by":"person",
  "aggregation_unit":"day",
  "start_date": thirtyDaysAgo,
  "end_date": today,
  "order_by":{
    "field":"core_time_bad",
    "dirn":"desc"},
  "statistics":["core_time_bad","bad_core_ratio"]
}));

var template_source = $('#job-efficiency-template').html();
var template = Handlebars.compile(template_source);
var helpers = {
  title: function(){
    return this.unit_title + " Efficiency Report - " + thirtyDaysAgo + " to " + today;
  },
  xdmod_url: function(){
    return '<%= Configuration.xdmod_host %>';
  },
  bad_percent: function(){
    return (parseFloat(this.bad_ratio)).toFixed(1)
  },
  good_percent: function(){
    return (100 - parseFloat(this.bad_ratio)).toFixed(1)
  }
};

var round = function(num){
   return parseFloat(num).toFixed(1);
}

var render_jobs_template = function(context){
  $('#jobsEfficiencyReportPanelDiv').html(template(_.merge(context, {unit: "jobs", unit_title: "Jobs"}), {helpers: helpers}));
}
var render_core_hours_template = function(context){
  $('#coreHoursEfficiencyReportPanelDiv').html(template(_.merge(context, {unit: "core hours", unit_title: "Core Hours"}), {helpers: helpers}));
}

render_jobs_template({loading: true});
render_core_hours_template({loading: true});

var xdmodUrl = '<%= Configuration.xdmod_host %>';
promiseLoggedIntoXDMoD(xdmodUrl)
  .then(() => fetch(jobsUrl, { credentials: 'include' }))
  .then(response => response.ok ? Promise.resolve(response) : Promise.reject(new Error(response.statusText)))
  .then(response => response.json())
  .then((data) => {
    let results = data && data["results"] && data["results"]["0"];
    if(! results){
      throw new Error('Job data returned by request is invalid.')
    }

    render_jobs_template({
      bad_ratio: results.bad_job_ratio,
      count_bad: results.job_count_bad,
      count: results.job_count
    });
    render_core_hours_template({
      bad_ratio: results.bad_core_ratio,
      count_bad: round(results.core_time_bad),
      count: round(results.core_time)
    });
  })
  .catch((error) => {
    console.error(error);
    render_jobs_template({error: error});
    render_core_hours_template({error: error});
  });
}());
</script>
