<%= bootstrap_form_for(@session_context) do |f| %>
  <% f.object.each do |attrib| %>
    <%= create_widget(f, attrib, format: @render_format) %>
  <% end %>

  <%= f.submit t('dashboard.batch_connect_form_launch'), class: "btn btn-primary btn-block" %>
<% end %>

<%= javascript_tag do %>
(function(){
	'use strict'

	// update form elements visibility based on enabled/disabled scopes
    function update_form_elements_visibility_based_on_scope() {
      // elements whose visibility changes based on active scopes
      let controlled_form_groups = Array.from(
        document.querySelectorAll('.form-group[data-ood-show-for]'));

      // array of enabled scopes' values
      let enabled_scopes_values = Array.from(
        document.querySelectorAll(
          'option[data-ood-show-scope]:checked, input[data-ood-show-scope]:checked'
          ).values()).map(x => x.dataset.oodShowScope);

      // go through each controlled form-group and
      // hide or show it according to its respective
      // enabled scopes' values
      controlled_form_groups.forEach(
        el => update_element_visibility(
          el, enabled_scopes_values.includes(
            el.dataset.oodShowFor)));

    }

    // change handler for when select options or input scopes are enabled/disabled
    $('select:has(option[data-ood-show-scope]), input[data-ood-show-scope]').change(
      update_form_elements_visibility_based_on_scope);

	  // show or hide the element based on whether its scope is enabled or not
    function update_element_visibility(e1, visible) {
      let input_element = $(e1).find(":input");
      $( e1 ).toggle(visible);
      input_element.prop( "disabled", ! visible );
    }

    update_form_elements_visibility_based_on_scope();


}());
<% end %>


<% @app.custom_javascript_files.each do |jsfile| %>
  <%= javascript_tag "(function(){\n" + jsfile.read + "\n}());" %>
<% end %>
