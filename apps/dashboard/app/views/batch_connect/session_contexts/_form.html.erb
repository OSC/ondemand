<%= bootstrap_form_for(@session_context) do |f| %>
  <% f.object.each do |attrib| %>
    <%= create_widget(f, attrib, format: @render_format) %>
  <% end %>

  <%= f.submit t('dashboard.batch_connect_form_launch'), class: "btn btn-primary btn-block" %>
<% end %>

<%= javascript_tag do %>
(function(){
	'use strict'

	/**
	 * Toggle the visibilty of a form group
	 */
	function toggle_visibilty_of_elements() {
	  /* array of controlled elements */
	  let controlled_scopes = Array.from(document.querySelectorAll('[data-show-scope]'));

	  /* array of active scopes' values */
	  let enabled_scopes_values = Array.from(document.querySelectorAll('option[data-show-scope-show]:checked, input[data-show-scope-show]:checked').values()).map(x => x.dataset.showScopeShow);

      let elements_to_show = controlled_scopes.filter(x => enabled_scopes_values.includes(x.dataset.showScope));
	  let elements_to_hide = controlled_scopes.filter(x => !enabled_scopes_values.includes(x.dataset.showScope));

	  hide_show_elements(elements_to_show, elements_to_hide);
	}

	/*
	* Hides/shows the controlled scopes
	*/
	function hide_show_elements(show_elms, hide_elms) {
	  show_elms.forEach(elm => $(elm).parent().show());
	  hide_elms.forEach(elm => { let parent = $(elm).parent()
	    parent.hide()
        /* check if the element to show/hide has a help block (this is needed for checkbox elements that one wishes to hide as the help blocks are not within the parent of element) */
	    parent.parent().next().hasClass('help-block') ? parent.parent().next().hide() : null
	  });
	}

	/**
 	* Sets the change handler for scopes
 	*/
	function set_change_handler() {
	  let enabled_scopes = $('select:has(option[data-show-scope-show]), input[data-show-scope-show]').change(toggle_visibilty_of_form_group);
	}

	toggle_visibilty_of_form_group();
	set_change_handler();

}());
<% end %>


<% @app.custom_javascript_files.each do |jsfile| %>
  <%= javascript_tag "(function(){\n" + jsfile.read + "\n}());" %>
<% end %>
