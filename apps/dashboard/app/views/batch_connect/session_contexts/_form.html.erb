<%= bootstrap_form_for(@session_context) do |f| %>
  <% f.object.each do |attrib| %>
    <%= create_widget(f, attrib, format: @render_format) %>
  <% end %>

  <%= f.submit t('dashboard.batch_connect_form_launch'), class: "btn btn-primary btn-block" %>
<% end %>

<%= javascript_tag do %>
(function(){
	'use strict'

	/**
	 * Toggle the visibilty of a certain field based on data
	 * attributes
	 *
	 * Academic: hidden
	 * Commercial: visible
	 */
	function toggle_scopes_visibility() {
	  // define select options with data-visibility-scope-show attribute
	  let select_scopes = $('option[data-visibility-scope-show]');
	  // define the checkbox elements with data-visibility-scope-show-a ttribute
	  let checkbox_scopes = $('[data-visibility-scope-show]:checkbox');

	  // call each respective function to show/hide element with data-visibility-scope attribute
	  toggle_visibility_of_checkbox_scopes(checkbox_scopes);
	  toggle_visibility_of_select_scopes(select_scopes);
	}

	/**
	  * Toggle the visibility of the select scopes
	  *
	  * @param    {array}    select_scopes   Options of Select Elements with the data-visibility-scope-show attribute
	  */
	function toggle_visibility_of_select_scopes(select_scopes) {
	  // declare prevObj if select options have the same parent
	  let prevObj;
	  select_scopes.each(function() {

	    let form_element = $('[data-visibility-scope="' + $(this).data('visibility-scope-show') + '"]');

	    let parent = form_element.parent();

	    if (!(this.selected)) {

	      // skip unselected element with data attribute of the same parent (in case one wishes to display a certain element based on a number of versions for a bc app e.g. Rstudio server)
	      if (typeof prevObj !== 'undefined'
	          && prevObj.parent().get(0) === $(this).parent().get(0)) return;


	      parent.hide();
	      form_element.val('');

	      // check if the element to show/hide has a help block (this is needed for checkbox elements that one wishes to hide as the help blocks are not within the parent of element)
	      parent.parent().next().hasClass('help-block') ? parent.parent().next().hide() : null;


	    } else {
	      parent.show();
	      // define the previous object that was shown
	      prevObj = $(this);

	      // check if the element to show/hide has a help block (this is needed for checkbox elements that one wishes to hide as the help blocks are not within the parent of element)
	      parent.parent().next().hasClass('help-block') ? parent.parent().next().show() : null;

	    }
	  });
	}

	/**
	  * Toggle the visibility of the checkbox scopes
	  *
	  * @param    {array}    checkbox_scopes   input elements of type checkbox with the data-visibility-scope-show attribute
	  */
	function toggle_visibility_of_checkbox_scopes(checkbox_scopes) {
	  checkbox_scopes.each(function() {
	    $(this).click(function() {
	      let form_element = $('[data-visibility-scope="' + $(this).data('visibility-scope-show') + '"]');

	      let parent = form_element.parent();

	      if ($(this).is(':checked')) {
	        parent.show();

	        // check if the element to show/hide has a help block (this is needed for checkbox elements that one wishes to hide as the help blocks are not within the parent of element)
	        parent.parent().next().hasClass('help-block') ? parent.parent().next().show() : null;

	      } else {
	        parent.hide();

	        form_element.prop('checked', false);

	        // check if the element to show/hide has a help block (this is needed for checkbox elements that one wishes to hide as the help blocks are not within the parent of element)
	        parent.parent().next().hasClass('help-block') ? parent.parent().next().hide() : null;

	      }
	    });
	  });
	}


	/**
	 * Sets the change handler for the select scope
	 */
	function set_select_scope_change_handler() {
	  let data_visibility_scope_show = $('select:has(option[data-visibility-scope-show])');

	  let checkbox_scopes = $('[data-visibility-scope-show]:checkbox');

	  hide_checkbox_dependent_elements_on_display(checkbox_scopes);

	  data_visibility_scope_show.change(toggle_scopes_visibility);
	}

	/**
	 * Hides checkbox scope dependent elements on initial display
	 * as their visibility depends on the click event
	 */
	 function hide_checkbox_dependent_elements_on_display(checkbox_scopes) {

	 	checkbox_scopes.each(function() {

	    let form_element = $('[data-visibility-scope="' + $(this).data('visibility-scope-show') + '"]');

	    let parent = form_element.parent();

	    // hide the element that depends on the checkbox, as the checkbox is unchecked on display (this is done because showing or hiding the element only depends on the click event of the checkbox)
	    parent.hide();

	    // hide the help block as well if it exits for that element
	    parent.parent().next().hasClass('help-block') ? parent.parent().next().hide() : null;


	  });

	 }

	/**
	 * Install event handlers
	 */
	$(document).ready(function() {
	  // Ensure that fields are shown or hidden based on what was set in the last session
	  toggle_scopes_visibility();
	  set_select_scope_change_handler();
	});
}());
<% end %>


<% @app.custom_javascript_files.each do |jsfile| %>
  <%= javascript_tag "(function(){\n" + jsfile.read + "\n}());" %>
<% end %>
