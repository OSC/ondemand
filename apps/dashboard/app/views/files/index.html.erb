<div class="text-right">

  <%# FIXME: open in terminal should be dropdown of all clusters (with default) %>
  <button type="button" class="btn btn-default btn-sm"><i class="fas fa-terminal" aria-hidden="true"></i> Open in Terminal</button>
  <button id="new-file-btn" type="button" class="btn btn-default btn-sm"><i class="fas fa-plus" aria-hidden="true"></i> New File</button>
  <button id="new-dir-btn" type="button" class="btn btn-default btn-sm"><i class="fas fa-folder-plus" aria-hidden="true"></i> New Directory</button>
  <button id="upload-btn" type="button" class="btn btn-default btn-sm"><i class="fas fa-upload" aria-hidden="true"></i> Upload</button>
  <button id="download-btn" type="button" class="btn btn-primary btn-sm"><i class="fas fa-download" aria-hidden="true"></i> Download</button>
  <button id="copy-move-btn" type="button" class="btn btn-default btn-sm"><i class="fas fa-copy" aria-hidden="true"></i> Copy/Move</button>
  <button id="delete-btn" type="button" class="btn btn-danger btn-sm"><i class="fas fa-trash" aria-hidden="true"></i> Delete</button>
</div>

<hr>

<div class="row">
<div class="col-md-3">
<%# FIXME: need a better solution instead of favorite links tied to an app? duplicates code in OodApp#links %>
<ul id="favorites" class="nav nav-pills nav-stacked well well-sm" style="max-height: 400px; overflow: scroll">
  <li role="presentation"><%= link_to 'Home Directory', files_path(Dir.home), style: "padding-top: 5px;padding-bottom: 5px;", class: "d" %></li>
  <% OodFilesApp.new.favorite_paths.each do |p| %>
    <li><%= link_to p.title || p.path.to_s, files_path(p.path.to_s), style: "padding-top: 5px;padding-bottom: 5px;", class: "d" %>
  <% end %>
</ul>

<div id="clipboard">
  <!--
  <div class="well">
    <button id="clipboard-clear" type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
    <p style="margin-top: 30px">Copy or move the files below to the current directory:</p>
    <ul class="list-group">
      <li class="list-group-item"><span title="directory" class="fa fa-folder" style="color: gold"></span> openhouse</li>
      <li class="list-group-item"><span title="directory" class="fa fa-file" style="color: lightgrey"></span> ts180.png</li>
    </ul>
    <button id="clipboard-copy-to-dir" class="btn btn-primary">Copy</button>  <button id="clipboard-move-to-dir" class="btn btn-danger pull-right">Move</button>
  </div>
-->
</div>


<script id="clipboard-template" type="text/template">
{{#if files}}
  <div class="well">
    <button id="clipboard-clear" type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
    <p style="margin-top: 30px">Copy or move the files below from <code>{{from}}</code>to the current directory:</p>
    <ul class="list-group">
      {{#each files}}
        {{#if directory}}
          <li class="list-group-item"><span title="directory" class="fa fa-folder" style="color: gold"></span> {{name}}</li>
        {{else}}
          <li class="list-group-item"><span title="file" class="fa fa-file" style="color: lightgrey"></span> {{name}}</li>
        {{/if}}
      {{/each}}
    </ul>
    <button id="clipboard-copy-to-dir" class="btn btn-primary">Copy</button>  <button id="clipboard-move-to-dir" class="btn btn-danger pull-right">Move</button>
  </div>
{{/if}}
</script>


<script id="actions-btn-template" type="text/template">
<div class="btn-group">
  <button type="button" class="btn btn-default btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
    <span class="fa fa-ellipsis-v"></span>
  </button>
  <ul class="dropdown-menu">
    <!-- whats the accessibility rules for href and it acting like a button -->
    {{#if file}}
    <li><a href="#" class="view-file" data-row-index="{{row_index}}">View</a></li>
    <li><a href="#" class="edit-file" data-row-index="{{row_index}}">Edit</a></li>
    {{/if}}
    <li><a href="#" class="rename-file" data-row-index="{{row_index}}">Rename</a></li>
    <!--
    <li role="separator" class="divider"></li>
    <li><a href="#" class="download-file" data-row-index="{{row_index}}">Download</a></li>
    <li role="separator" class="divider"></li>
    <li><a href="#" class="delete-file" data-row-index="{{row_index}}">Delete</a></li>
      -->
  </ul>
</div>
</script>


</div>

<div class="col-md-9">

  <!-- <div>
    <button type="button" class="btn btn-default btn-sm"><i class="fas fa-eye" aria-hidden="true"></i> View</button>
    <button id="edit-btn" type="button" class="btn btn-default btn-sm"><i class="fas fa-edit" aria-hidden="true"></i> Edit</button>
    <button id="rename-btn" type="button" class="btn btn-default btn-sm"><i class="fas fa-font" aria-hidden="true"></i> Rename</button>
    <button id="download-btn" type="button" class="btn btn-primary btn-sm"><i class="fas fa-download" aria-hidden="true"></i> Download</button>
    <button id="copy-move-btn" type="button" class="btn btn-default btn-sm"><i class="fas fa-copy" aria-hidden="true"></i> Copy/Move</button>
    <button id="delete-btn" type="button" class="btn btn-danger pull-right btn-sm"><i class="fas fa-trash" aria-hidden="true"></i> Delete</button>
  </div> -->

  <%# put search box ABOVE the breadcrumbs %>
  <div style="margin-top: 20px">

    <ol id="path-breadcrumbs" class="breadcrumb">
      <%= render partial: 'breadcrumb', collection: @path.descend, as: :file, locals: { file_count: @path.descend.count, full_path: @path } %>
    </ol>

    <table class="table table-striped table-condensed" id="directory-contents">
      <thead>
        <tr>
          <th><span class="sr-only">Select</span></th>
          <th>Type</th>
          <th>Name</th>
          <th><span class="sr-only">Actions</span></th>
          <th>Size</th>
          <th>Modified at</th>
          <th>Owner</th>
          <th>Mode</th>
        </tr>
      </thead>
      <tbody>
      </tbody>
    </table>
  </div>
</div>

</div>

<%# FIXME: problem with not using tables %>
<script>
const csrf_token = document.querySelector('meta[name="csrf-token"]').content;

// this uses event delegation so it captures events even if dom element is recreated
var clipboardjs = new ClipboardJS('#copy-path');
clipboardjs.on('success', function(e) {
  $(e.trigger).tooltip({title: 'Copied path to clipboard!', trigger: 'manual', placement: 'bottom'}).tooltip('show');
  setTimeout(() => $(e.trigger).tooltip('hide'), 2000);
  e.clearSelection();
});
clipboardjs.on('error', function(e) {
  // TODO: provide alternate? display text in a box below and say "highlight to copy"
  // copying to clipboard failed, you can manually copy here:
  // e.trigger
  e.clearSelection();
});

history.replaceState({
  currentDirectory: '<%= @path %>',
  currentDirectoryUrl: '<%= files_path(@path) %>',
  currentDirectoryUpdatedAt: '<%= Time.now.to_i %>'
}, null);

$.fn.dataTable.ext.search.push(
    function( settings, data, dataIndex  ) {
      //FIXME:
      // let api = new $.fn.dataTable.Api( settings );
      // let column = api.column('name:name').index().column();
      return $('#show-dotfiles').is(':checked') || ! data[2].startsWith('.');
    }
)

let actionsBtnTemplate = (function(){
  let template_str  = $('#actions-btn-template').html();
  return Handlebars.compile(template_str);
})();

function update_datatables_status(api){
  // from "function info ( api )" of https://cdn.datatables.net/select/1.3.1/js/dataTables.select.js
  let rows    = api.rows( { selected: true } ).flatten().length,
      page_info = api.page.info(),
      msg = page_info.recordsTotal == page_info.recordsDisplay ? `Showing ${page_info.recordsDisplay} rows` : `Showing ${page_info.recordsDisplay} of ${page_info.recordsTotal} rows`;

  // TODO: replace this with a single react widget that:
  // a) saves it the props to state
  // b) during update of props, set to state (and ignore undefined vs [] for transfers)
  //
  // then when setting a value you can know when it changed from running to completed for example and know to show that for only a short time
  $('.datatables-status').html(`${msg} - ${rows} rows selected`);
}


var table = $('#directory-contents').on('xhr.dt', function ( e, settings, json, xhr ) {
  // new ajax request for new data so update date/time
  if(json && json.time){
    history.replaceState(_.merge({}, history.state, {currentDirectoryUpdatedAt: json.time}), null);
  }
}).DataTable({
  ajax: {
    url: history.state.currentDirectoryUrl,
    dataSrc: 'files',
  },
  order: [[1, "asc"], [2, "asc"]],
  rowId: 'id',
  paging:false,
  //FIXME: switch with flexbox; calc() does not work here (as setting inline value calc to max height doesn't work either in Firefox)
  // scrollY: '65vh',
  scrollCollapse: true,
  select: {
    style: 'os',
    className: 'selected',
    toggleable: true,
    // don't trigger select checkbox column as select
    // if you need to omit more columns, use a "selectable" class on the columns you want to support selection
    selector: 'td:not(:first-child)'
  },
  // https://datatables.net/reference/option/dom
  // dom: '', dataTables_info nowrap
  //
  // put breadcrmbs below filter!!!
  initComplete: () => $('.transfers-status').html('<%=j render partial: 'transfers/transfer', collection: sort_by_created_at(@transfers), as: :transfer %>'),
  dom: "<'row'<'col-sm-12'f>>" + // normally <'row'<'col-sm-6'l><'col-sm-6'f>> but we disabled pagination so l is not needed (dropdown for selecting # rows)
       "<'row'<'col-sm-12'<'dt-status-bar'<'datatables-status'><'transfers-status'>>>>"+
       "<'row'<'col-sm-12'tr>>" +
       "<'row'<'col-sm-12'<'dt-status-bar'<'datatables-status'><'transfers-status'>>>>", // normally this is <'row'<'col-sm-5'i><'col-sm-7'p>> but we disabled pagination so have info take whole row
  columns: [
    {
      data: null,
      orderable: false,
      defaultContent: '<input type="checkbox">',
      render: function(data, type, row, meta) {
        var api = new $.fn.dataTable.Api( meta.settings );
        let selected = api.rows(meta.row, { selected: true }).count() > 0;
        return `<input type="checkbox" ${selected ? 'checked' : ''}> ${selected ? 'checked' : ''}`;
      }
    },
    { data: 'type', render: (data, type, row, meta) => data == 'd' ? '<span title="directory" class="fa fa-folder" style="color: gold"><span class="sr-only"> dir</span></span>' : '<span title="file" class="fa fa-file" style="color: lightgrey"><span class="sr-only"> file</span></span>' }, // type
    { name: 'name', data: 'name', render: (data, type, row, meta) => `<a class="${row.type} name" href="${row.type == 'd' ? row.url : row.download_url}">${Handlebars.escapeExpression(data)}</a>` }, // name
    { name: 'actions', orderable: false, data: null, render: (data, type, row, meta) => actionsBtnTemplate({ row_index: meta.row, file: row.type != 'd'  }) }, // FIXME: pass row index or something needed for finding item
    { data: 'size' }, // size
    { data: 'modified_at' }, // modified_at
    { name: 'owner', data: 'owner', visible: $('#show-owner-mode').is(':checked') }, // owner
    { name: 'mode', data: 'mode', visible: $('#show-owner-mode').is(':checked') } // mode
  ]
});

//FIXME: race cond?
// prepend show dotfiles checkbox to search box
$('#directory-contents_filter').prepend('<label style="margin-right: 20px"><input type="checkbox" id="show-dotfiles"> Show Dotfiles</label>')
$('#directory-contents_filter').prepend('<label style="margin-right: 14px"><input type="checkbox" id="show-owner-mode"> Show Owner/Mode</label>')

table.on('draw.dtSelect.dt select.dtSelect.dt deselect.dtSelect.dt info.dt', function () {
  update_datatables_status(table);
});

function reloadTable(id){
  table.ajax.reload();

  if(id){
    table.row(id).select();
  }
}

$('#show-dotfiles').change(() => table.draw());

// TODO: https://datatables.net/reference/button/colvis
$('#show-owner-mode').change(() => {
  let visible = $('#show-owner-mode').is(':checked');
  table.column('owner:name').visible(visible);
  table.column('mode:name').visible(visible);
});

$('#path-breadcrumbs').on('click', '#goto-btn', function(){
  Swal.fire({
    title: 'Change Directory',
    input: 'text',
    inputLabel: 'Path',
    inputValue: history.state.currentDirectory,
    showCancelButton: true,
    inputValidator: (value) => {
      if (! value || ! value.startsWith('/')) {
        // TODO: validate filenames against listing
        return 'Provide an absolute pathname'
      }
    },
    showClass: {
      popup: 'swal2-noanimation',
      backdrop: 'swal2-noanimation'
    },
    hideClass: {
      popup: '',
      backdrop: ''
    }
  })
  // FIXME: do not allow / in the filename or ..
  .then((result) => result.isConfirmed ? Promise.resolve(result.value) : Promise.reject('cancelled'))
  // FIXME: handle error cases

  //FIXME: relative urls too or just absolute?
  .then((pathname) => goto('<%= files_path('/') %>' + pathname))
  .catch(e => {
      if(e != 'cancelled'){
        //FIXME: error
        console.error(e);
      }
  })
});

$('#new-file-btn').click(() => {
  Swal.fire({
    title: 'New File',
    input: 'text',
    inputLabel: 'Filename',
    showCancelButton: true,
    inputValidator: (value) => {
      if (! value) {
        // TODO: validate filenames against listing
        return 'Provide a filename'
      }
    },
    showClass: {
      popup: 'swal2-noanimation',
      backdrop: 'swal2-noanimation'
    },
    hideClass: {
      popup: '',
      backdrop: ''
    }
  })
  // FIXME: do not allow / in the filename or ..
  .then((result) => result.isConfirmed ? Promise.resolve(result.value) : Promise.reject('cancelled'))
  // FIXME: handle error cases
  .then((filename) => fetch(`${history.state.currentDirectoryUrl}/${encodeURI(filename)}`, {method: 'put', headers: { 'X-CSRF-Token': csrf_token }}))
  // TODO: parse JSON response to get id of file created
  .then(() => reloadTable())
  .catch(e => {
      if(e != 'cancelled'){
        //FIXME: error
        console.error(e);
      }
  })
});

$('#new-dir-btn').click(() => {
  Swal.fire({
    title: 'New Directory',
    input: 'text',
    inputLabel: 'Directory name',
    showCancelButton: true,
    inputValidator: (value) => {
      if (! value) {
        // TODO: validate filenames against listing
        return 'Provide a directory name'
      }
    },
    showClass: {
      popup: 'swal2-noanimation',
      backdrop: 'swal2-noanimation'
    },
    hideClass: {
      popup: '',
      backdrop: ''
    }
  })
  // FIXME: do not allow / in the filename or ..
  // error cases
  .then((result) => result.isConfirmed ? Promise.resolve(result.value) : Promise.reject('cancelled'))
  .then((filename) => fetch(`${history.state.currentDirectoryUrl}/${encodeURI(filename)}?dir=true`, {method: 'put', headers: { 'X-CSRF-Token': csrf_token }}))
  // TODO: parse JSON response to get id of file created
  .then(() => reloadTable())
  .catch(e => {
      if(e != 'cancelled'){
        //FIXME: error
        console.error(e);
      }
  })
});

$('#download-btn').click(() => {
  let selection = table.rows({selected: true}).data();
  if(selection.length != 1){
    Swal.fire('Select only 1 file to download', 'You have selected none or multiple rows', 'error')
  }
  else if(selection[0].type == "d"){
    Swal.fire('Cannot download directory', 'Can only download files', 'error')
    // TODO
  }
  else {
    // creating the temporary iframe is exactly what the CloudCmd does
    // so this just repeats the status quo

    // FIXME: currentDirectoryUrl possible escaping issues... what if path has spaces etc.
    let filename = $($.parseHTML(selection[0].name)).text(),
        downloadUrl = `${history.state.currentDirectoryUrl}/${encodeURI(filename)}?download=${Date.now().toString()}`,
        iframe = document.createElement('iframe'),
        TIME = 30 * 1000;
    iframe.setAttribute('class', 'hidden');
    iframe.setAttribute('src', downloadUrl);

    document.body.appendChild(iframe);

    setTimeout(function() { document.body.removeChild(iframe); }, TIME);
  }
});



//TODO: uppy locales supported - pull from server side locales
//TODO: accessibility analysis of solution

function getEmptyDirs(entry){
  return new Promise((resolve) => {
    if(entry.isFile){
      resolve([]);
    }
    else{
      //FIXME: logDropError is a function that is typically used internally by uppy dashboard

      // getFilesAndDirectoriesFromDirectory has no return value, so turn this into a promise
      getFilesAndDirectoriesFromDirectory(entry.createReader(), [], function(error){ console.error(error)}, {
        onSuccess: (entries) => {
          if(entries.length == 0){
            // this is an empty directory
            resolve([entry]);
          }
          else{
            Promise.all(entries.map(e => getEmptyDirs(e))).then((dirs) => resolve(_.flattenDeep(dirs)));
          }
        }
      })
    }
  });
}

// https://github.com/transloadit/uppy/blob/7ce58beeb620df3df0640cb369f5d71e3d3f751f/packages/%40uppy/utils/src/getDroppedFiles/utils/webkitGetAsEntryApi/getFilesAndDirectoriesFromDirectory.js
/**
 * Recursive function, calls the original callback() when the directory is entirely parsed.
 *
 * @param {FileSystemDirectoryReader} directoryReader
 * @param {Array} oldEntries
 * @param {Function} logDropError
 * @param {Function} callback - called with ([ all files and directories in that directoryReader ])
 */
function getFilesAndDirectoriesFromDirectory (directoryReader, oldEntries, logDropError, { onSuccess }) {
  directoryReader.readEntries(
    (entries) => {
      const newEntries = [...oldEntries, ...entries]
      // According to the FileSystem API spec, getFilesAndDirectoriesFromDirectory() must be called until it calls the onSuccess with an empty array.
      if (entries.length) {
        setTimeout(() => {
          getFilesAndDirectoriesFromDirectory(directoryReader, newEntries, logDropError, { onSuccess })
        }, 0)
      // Done iterating this particular directory
      } else {
        onSuccess(newEntries)
      }
    },
    // Make sure we resolve on error anyway, it's fine if only one directory couldn't be parsed!
    (error) => {
      logDropError(error)
      onSuccess(oldEntries)
    }
  )
}

(function(){
  class EmptyDirCreator extends Uppy.Core.Plugin {
    constructor (uppy, opts){
      super(uppy, opts)
      this.id = this.opts.id || 'EmptyDirUploaderCatcher';
      this.type = 'acquirer';

      this.empty_dirs = [];
      this.last_entries = [];

      this.handleRootDrop = this.handleRootDrop.bind(this);
      this.createEmptyDirs = this.createEmptyDirs.bind(this);
    }

    handleRootDrop (e) {
      // from https://github.com/transloadit/uppy/blob/7ce58beeb620df3df0640cb369f5d71e3d3f751f/packages/%40uppy/utils/src/getDroppedFiles/index.js
      if (e.dataTransfer.items && e.dataTransfer.items[0] && 'webkitGetAsEntry' in e.dataTransfer.items[0]) {
        // toArray https://github.com/transloadit/uppy/blob/7ce58beeb620df3df0640cb369f5d71e3d3f751f/packages/%40uppy/utils/src/toArray.js#L4
        let items = Array.prototype.slice.call(e.dataTransfer.items || [], 0);
        let entries = items.map(i => i.webkitGetAsEntry()).filter(i => i);

        Promise.all(entries.map(i => getEmptyDirs(i))).then((dirs) => {
          this.empty_dirs = this.empty_dirs.concat(_.flattenDeep(dirs));
        });
      }
      //else we don't have access to directory information
    }

    createEmptyDirs () {
      // PostProcessor:
      // returns a promise that resolves when processing completes; its resolution value is ignored

      //TODO: error checking and reporting
      Promise.all(this.empty_dirs.map((d) => {
        // "fullPath" should actually be the path relative to the current directory
        //TODO: could remove the currentDirectoryPath if present though...
        let filename = _.trimStart(d.fullPath, '/');

        return fetch(`${history.state.currentDirectoryUrl}/${encodeURI(filename)}?dir=true`, {method: 'put'})
        //TODO: parse json response verify if there was an error creating directory and handle error
      })).then(() => this.empty_dirs = []);
    }

    install () {
      //TEST: does this get called if upload fails???
      this.uppy.addPostProcessor(this.createEmptyDirs);

      //TODO: subscribe to event on dashboard close?! to clear empty_dirs?
    }

    uninstall () {
      this.uppy.removePostProcessor(this.createEmptyDirs);
    }
  }

  function closeAndResetUppyModal(uppy){
    uppy.getPlugin('Dashboard').closeModal();
    uppy.reset();
  }


  window.uppy = Uppy.Core();
  uppy.use(EmptyDirCreator);
  uppy.use(Uppy.Dashboard, {
    trigger: '#upload-btn',
    fileManagerSelectionType: 'both',
    disableThumbnailGenerator: true,
    showLinkToFileUploadResult: false,
    closeModalOnClickOutside: true,
    closeAfterFinish: true,
    allowMultipleUploads: false,
    onRequestCloseModal: () => closeAndResetUppyModal(uppy),
  });
  uppy.use(Uppy.XHRUpload, {
    endpoint: '<%= files_upload_path %>',
    withCredentials: true,
    fieldName: 'file',
    limit: 1,
    headers: { 'X-CSRF-Token': csrf_token }
  });

  uppy.on('file-added', (file) => {
    uppy.setFileMeta(file.id, { parent: history.state.currentDirectory });
    if(file.meta.relativePath == null && file.data.webkitRelativePath){
      uppy.setFileMeta(file.id, { relativePath: file.data.webkitRelativePath });
    }
  });

  // https://stackoverflow.com/questions/6756583/prevent-browser-from-loading-a-drag-and-dropped-file
  window.addEventListener("dragover",function(e){
    e = e || event;
    e.preventDefault();
  },false);
  window.addEventListener("drop",function(e){
    e = e || event;
    e.preventDefault();
  },false);

  $('#directory-contents').on('drop', function(e){
    this.classList.remove('dragover');
    console.log('File(s) dropped');
    // Prevent default behavior (Prevent file from being opened)

    // pass drop event to uppy dashboard
    uppy.getPlugin('Dashboard').openModal().then(() => uppy.getPlugin('Dashboard').handleDrop(e.originalEvent))
  });

  $('#directory-contents').on('dragover', function(e){
    this.classList.add('dragover');

    // Prevent default behavior (Prevent file from being opened)
    e.preventDefault();

    // specifies what feedback will be shown to the user by setting the dropEffect attribute of the DataTransfer associated with the event
    // too bad we can't show an indicator (no dragstart/end when dragging from OS to browser)
    e.originalEvent.dataTransfer.dropEffect = 'copy';
  });

  $('#directory-contents').on('dragleave', function(e){
    this.classList.remove('dragover');
  });

})();


function goto(url, pushState = true){
  // update URL
  //FIXME: reload includes callback so if there is an error - we display it and change url back :-P
  // for example - you try to access a directory you do not have permission to access
  //
  // the only way to handle this might be to fetch the json directly, handle errors, and update the table with
  // the new JSON data - and avoid using datatables AJAX
  table.ajax.url(url);

  table.ajax.reload(function(data){
    $('#path-breadcrumbs').html(data.breadcrumbs_html);

    //FIXME: control coupling
    //
    // update(url, callback)
    // goto(url)
    //
    if(pushState){
      history.pushState({
        currentDirectory: data.path,
        currentDirectoryUrl: data.url
      }, data.name, data.url)
    }
  });
}

window.onpopstate = function(event){
  // FIXME: handle edge case if state ! exist
  setTimeout(() => {
    goto(event.state.currentDirectoryUrl, false);
  }, 0);
};

// borrowed from Turbolinks
// event: MouseEvent
function clickEventIsSignificant(event) {
  return !(
    // (event.target && (event.target as any).isContentEditable)
       event.defaultPrevented
    || event.which > 1
    || event.altKey
    || event.ctrlKey
    || event.metaKey
    || event.shiftKey
  )
}

// this would be perfect for stimulus FYI
$('#directory-contents tbody').on('click', '.view-file', function(e){
  e.preventDefault();

  let row = table.row(this.dataset.rowIndex).data();

  //TODO: view either opens file in new directory OR opens in viewer
  // the more we shift this to the API the better!
  // including URL templates

});

$('#directory-contents tbody').on('click', '.edit-file', function(e){
  e.preventDefault();

  let row = table.row(this.dataset.rowIndex).data();
  window.open(row.edit_url);
});

// FIXME: i broke rename :-P
$('#directory-contents tbody').on('click', '.rename-file', function(e){
  e.preventDefault();

  let row = table.row(this.dataset.rowIndex).data();

  // if there was some other attribute that just had the name...
  let filename = $($.parseHTML(row.name)).text();

  Swal.fire({
    title: 'Rename',
    input: 'text',
    inputLabel: 'Filename',
    inputValue: filename,
    showCancelButton: true,
    inputValidator: (value) => {
      if (! value) {
        // TODO: validate filenames against listing
        return 'Provide a filename to rename this to';
      }
      else if (value.includes('/') || value.includes('..')){
       return 'Filename cannot include / or ..';
      }
    },
    showClass: {
      popup: 'swal2-noanimation',
      backdrop: 'swal2-noanimation'
    },
    hideClass: {
      popup: '',
      backdrop: ''
    }
  })
  // FIXME: do not allow / in the filename or ..
  // error cases
  .then((result) => result.isConfirmed ? Promise.resolve(result.value) : Promise.reject('cancelled'))
  .then((new_filename) => {
    let payload = {
      command: 'mv',
      files: {}
    };
    payload.files[`${history.state.currentDirectory}/${filename}`] = `${history.state.currentDirectory}/${new_filename}`;
    console.log(payload);

    //FIXME: format: "js" like the other transfers?
    return fetch('<%= transfers_path(format: "json") %>', {method: 'post', body: JSON.stringify(payload), headers: { 'X-CSRF-Token': csrf_token }});
  })
  //FIXME: check for request failure
  .then(() => reloadTable())
  .catch(e => {
      if(e != 'cancelled'){
        //FIXME: error
        console.error(e);
      }
  })
});

//TODO:
// $('#directory-contents tbody').on('click', '.download-file', function(){
//   console.log(this);
//   //
// });
//
// $('#directory-contents tbody').on('click', '.delete-file', function(){
//   //
//   console.log(this);
// });



$('#directory-contents tbody, #path-breadcrumbs, #favorites').on('click', 'a.d', function(){
  if(clickEventIsSignificant(event)){
    event.preventDefault();
    event.cancelBubble = true;
    if(event.stopPropagation) event.stopPropagation();

    goto(this.getAttribute("href"));
  }
});

$('#directory-contents tbody').on('dblclick', 'tr td:not(:first-child)', function(){
    // handle doubleclick
    let a = this.parentElement.querySelector('a');
    if(a.classList.contains('d')) goto(a.getAttribute("href"));
});

function clearClipboard(){
   localStorage.removeItem('filesClipboard');
}

function updateClipboardFromSelection(){
  let selection = table.rows({selected: true}).data();
  if(selection.length == 0){
    clearClipboard();
  }
  else {
    let clipboardData = {
      from: history.state.currentDirectory,
      files: selection.toArray().map((f) => {
          return { directory: f.type == 'd', name: f.name };
      })
    };

    localStorage.setItem('filesClipboard', JSON.stringify(clipboardData));
  }
}

function loading(title){
  Swal.fire({
    title: title,
    allowOutsideClick: false,
    showConfirmButton: false,
    willOpen: () => { Swal.showLoading()  }
  });
}

function doneLoading(){
  Swal.close();
}

//FIXME: if getting JS, JS crafted server side can access globals clientside
// so we don't need to determine serverside what changed
var updateViewForTransfers = _.throttle(function(){
  //FIXME: error handling when this fails
  $.ajax({
    url: '<%=raw transfers_path(format: "js") %>',
    dataType: "script",
    data: {
      //TODO: verify this escapes query params
      current_directory: history.state.currentDirectory,
      current_directory_updated_at: history.state.currentDirectoryUpdatedAt
    }
  });
}, 1000);

function updateViewForClipboard(){
  let clipboard = JSON.parse(localStorage.getItem('filesClipboard') || '{}'),
      template_str  = $('#clipboard-template').html(),
      template = Handlebars.compile(template_str);

  $('#clipboard').html(template(clipboard));

  $('#clipboard-clear').click(() => {
      clearClipboard();
      updateViewForClipboard();
  });


  $('#clipboard-copy-to-dir').click(() => {
    let clipboard = JSON.parse(localStorage.getItem('filesClipboard') || 'null');

    if(clipboard){
      clipboard.to = history.state.currentDirectory;

      if(clipboard.from == clipboard.to){
        console.error('clipboard from and to are identical')

        // TODO: we want to support this use case
        // copy and paste as a new filename
        // but lots of edge cases
        // (overwrite or rename duplicates)
        // _copy
        // _copy_2
        // _copy_3
        // _copy_4
      }
      else{
        loading('Copying files...');

        // [{"/from/file/path":"/to/file/path" }]
        let files = {};
        clipboard.files.forEach((f) => {
          files[`${clipboard.from}/${f.name}`] = `${history.state.currentDirectory}/${f.name}`
        });

        fetch('<%= transfers_path(format: "js") %>', {
          method: 'post',
          body: JSON.stringify({
            command: 'cp',
            files: files
          }),
          headers: { 'X-CSRF-Token': csrf_token }
        })
        //TODO: if(response.status != 200){ fail!
        .then(response => response.text())
        .then((response_js) => {
          eval(response_js);
          clearClipboard();
          updateViewForClipboard();
          doneLoading();
        })
      }
    }
    else{
      console.error('files clipboard is empty');
    }
  });

  $('#clipboard-move-to-dir').click(() => {
    let clipboard = JSON.parse(localStorage.getItem('filesClipboard') || 'null');

    if(clipboard){
      clipboard.to = history.state.currentDirectory;

      if(clipboard.from == clipboard.to){
        console.error('clipboard from and to are identical')
        // TODO:
      }
      else{
        loading('Moving files...');

        let files = {};
        clipboard.files.forEach((f) => {
          files[`${clipboard.from}/${f.name}`] = `${history.state.currentDirectory}/${f.name}`
        });

        fetch('<%= transfers_path(format: "js") %>', {
          method: 'post',
          body: JSON.stringify({
            command: 'mv',
            files: files
          }),
          headers: { 'X-CSRF-Token': csrf_token }
        })
        //TODO: if(response.status != 200){ fail!
        .then(response => response.text())
        .then((response_js) => {
          eval(response_js);
          clearClipboard();
          updateViewForClipboard();
          doneLoading();
        })
      }
    }
    else{
      console.error('files clipboard is empty');
    }
  });
}

$('#copy-move-btn').click(() => {
    updateClipboardFromSelection();
    updateViewForClipboard();
});

$('#delete-btn').click(() => {
  let files = table.rows({selected: true}).data().toArray().map((f) => f.name);
  if(! files.length > 0){
    return;
  }

  Swal.fire({
    title: 'Delete files?',
    text: 'Are you sure you want to delete the files: ' + files.join(', '),
    showCancelButton: true,
    showClass: {
      popup: 'swal2-noanimation',
      backdrop: 'swal2-noanimation'
    },
    hideClass: {
      popup: '',
      backdrop: ''
    }
  })
  .then((result) => {
    if(result.isConfirmed){
      loading('Deleting files...');

      return fetch('<%= transfers_path(format: "js") %>', {
          method: 'post',
          body: JSON.stringify({
            command: 'rm',
            files: files.map(f => [history.state.currentDirectory, f].join('/'))
          }),
          headers: { 'X-CSRF-Token': csrf_token }
      });
    }
    else{
      return Promise.reject('cancelled');
    }
  })
  //TODO: if(response.status != 200){ fail!
  .then(response => response.text())
  .then((response_js) => {
      eval(response_js);
      doneLoading();
  })
  .catch(e => {
      if(e != 'cancelled'){
        //FIXME: error
        console.error(e);
      }

      doneLoading();
  })
});

// TODO: move all functionality out of click handlers to functions
// TODO: disable copy/move buttons if no local storage

//FIXME: so need to handle updateViewForClipboard based on EVENTS emitted by local storage modifications
updateViewForClipboard();
window.addEventListener('storage', () => {
  updateViewForClipboard();
});

// If there are running transfers, update view in 1 seconds
<%=raw 'setTimeout(() => updateViewForTransfers(), 1000);' if @transfers.any? {|t| ! t.status.completed? } %>

// if only 1 selected item, do not allow to de-select
table.on('user-select', function ( e, dt, type, cell, originalEvent  ) {
    var selected_rows = dt.rows( { selected: true  }  );
    if(selected_rows.count() == 1 && cell.index().row == selected_rows.indexes()[0] ){
      e.preventDefault();
    }
    else{
      // row need to find the checkbox to give it the focus
      cell.node().closest('tr').querySelector('input[type=checkbox]').focus();
    }
});


table.on( 'deselect', function ( e, dt, type, indexes ) {
  dt.rows(indexes).nodes().toArray().forEach(e => $(e).find('input[type=checkbox]').prop('checked', false));
});

table.on( 'select', function ( e, dt, type, indexes ) {
  dt.rows(indexes).nodes().toArray().forEach(e => $(e).find('input[type=checkbox]').prop('checked', true));
});

$('#directory-contents tbody').on('click', 'tr td:first-child input[type=checkbox]', function(){
  // input checkbox checked or not

  if($(this).is(':checked')){
    // select row
    table.row(this.closest('tr')).select();
  }
  else{
    // deselect row
    table.row(this.closest('tr')).deselect();
  }

  this.focus();
});

$('#directory-contents tbody').on('keydown', 'input, a', function(e){
  if(e.key == "ArrowDown"){
    e.preventDefault();

    // let tr = this.closest('tr').nextSibling;
    let tr = $(this.closest('tr')).next('tr').get(0);
    if(tr){
      tr.querySelector('input[type=checkbox]').focus();

      // deselect if not holding shift key to work
      // like native file browsers
      if(! e.shiftKey){
        table.rows().deselect();
      }

      // select if moving down
      table.row(tr).select();
    }
  }
  else if(e.key == "ArrowUp"){
    e.preventDefault();

    let tr = $(this.closest('tr')).prev('tr').get(0);
    if(tr){
      tr.querySelector('input[type=checkbox]').focus();

      // deselect if not holding shift key to work
      // like native file browsers
      if(! e.shiftKey){
        table.rows().deselect();
      }

      // select if moving up
      table.row(tr).select();
    }
  }
});


// https://stackoverflow.com/questions/19274028/changing-dom-element-position-of-searchbox-in-datatables/19276854
// $("#search_box").html($(".dataTables_filter"));
</script>
