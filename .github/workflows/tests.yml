name: Tests

on:
  push:
    branches: [master]
  pull_request:

jobs:
  unit-tests:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        ruby: ["2.7.1"]
        bundler: ["2.1.4"]
        include:
          # Test versions from Ubuntu 22.04
          - os: ubuntu-latest
            ruby: "3.0.2"
            bundler: "2.3.5"
    runs-on: ${{ matrix.os }}
    name: Unit tests

    steps:
      - name: Checkout ${{ github.sha	}}
        uses: actions/checkout@v2

      - name: Setup Ruby ${{ matrix.ruby }} using Bundler ${{ matrix.bundler }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler: ${{ matrix.bundler }}

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/vendor/bundle
          key: ${{ runner.os }}-${{ matrix.ruby }}-unit-gems-${{ hashFiles('apps/*/Gemfile.lock', 'Gemfile.lock') }}

      - name: Setup Bundler
        run: |
          bundle config path ~/vendor/bundle
          bundle install

      - name: Run ShellCheck
        run: bundle exec rake test:shellcheck

      - name: Run unit tests
        run: bundle exec rake test:unit

      - name: Run lint tests
        run: bundle exec rake lint || true

      - name: Run System Dashboard tests
        run: cd apps/dashboard; bin/rake test:system

      - name: Upload system test failures.
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: system-test-failures
          path: apps/dashboard/tmp/screenshots/*.png

  k8s-tests:
    runs-on: ubuntu-latest
    name: Kubernetes tests
    steps:
      - name: Checkout ${{ github.sha	}}
        uses: actions/checkout@v2
      - name: Create kind cluster
        uses: container-tools/kind-action@v1
      - name: Apply ondemand RBAC
        run: kubectl apply -f hooks/k8s-bootstrap/ondemand.yaml
      - name: Get ondemand token
        id: token
        run: |
           TOKEN_NAME=$(kubectl describe serviceaccount ondemand -n ondemand | grep Tokens | awk '{ print $2 }')
           TOKEN=$(kubectl describe secret $TOKEN_NAME -n ondemand | grep "token:" | awk '{ print $2 }')
           echo "::set-output name=ondemand::${TOKEN}"
      - name: Setup kubectl
        run: |
          kubectl config set-credentials ondemand --token="${{ steps.token.outputs.ondemand }}"
          kubectl config set-context kind-kind --user=ondemand
          kubectl config use-context kind-kind
          kubectl cluster-info
      - name: Test k8s-bootstrap
        run: /bin/bash hooks/k8s-bootstrap/k8s-bootstrap-ondemand.sh test hooks/hook.env.example

  e2e-tests:
    strategy:
      fail-fast: false
      matrix:
        dist: ["el7", "el8", "ubuntu-20.04", "ubuntu-22.04"]
        version: ["2.1"]
    runs-on: "ubuntu-latest"
    name: E2E test ${{ matrix.dist }} (ondemand-${{ matrix.version }})

    steps:
      - name: Checkout ${{ github.sha	}}
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Ruby using Bundler
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "2.7.1"
          bundler: "2.1.4"
          bundler-cache: true

      - name: Build package
        run: bundle exec rake package:build[${{ matrix.dist }}]
        env:
          VERSION: "${{ matrix.version }}.0"
          OOD_PACKAGING_DEBUG: 'true'

      - name: Run package tests
        run: bundle exec rake test:e2e
        env:
          BEAKER_set: ${{ matrix.dist }}
          OOD_BUILD_REPO: ${{ matrix.version }}

      - name: Debug failure
        if: failure()
        run: |
          find tmp/e2e_ctr/ -type f -name *.log -exec cat {} +
